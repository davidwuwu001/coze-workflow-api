import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// browser-external:ws
var require_ws = __commonJS({
  "browser-external:ws"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "ws" has been externalized for browser compatibility. Cannot access "ws.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node-fetch
var require_node_fetch = __commonJS({
  "browser-external:node-fetch"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node-fetch" has been externalized for browser compatibility. Cannot access "node-fetch.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:jsonwebtoken
var require_jsonwebtoken = __commonJS({
  "browser-external:jsonwebtoken"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "jsonwebtoken" has been externalized for browser compatibility. Cannot access "jsonwebtoken.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var { iterator, toStringTag } = Symbol;
var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag in val) && !(iterator in val);
};
var isEmptyObject = (val) => {
  if (!isObject(val) || isBuffer(val)) {
    return false;
  }
  try {
    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
  } catch (e) {
    return false;
  }
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    if (isBuffer(obj)) {
      return;
    }
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  if (isBuffer(obj)) {
    return null;
  }
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless, skipUndefined } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else if (!skipUndefined || !isUndefined(val)) {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (isBuffer(source)) {
        return source;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isEmptyObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  const msg = error && error.message ? error.message : "Error";
  const errCode = code == null && error ? error.code : code;
  AxiosError.call(axiosError, msg, errCode, config, request, response);
  if (error && axiosError.cause == null) {
    Object.defineProperty(axiosError, "cause", { value: error, configurable: true });
  }
  axiosError.name = error && error.name || "Error";
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (utils_default.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || void 0;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), {
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    },
    ...options
  });
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data, this.parseReviver);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils_default.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn(...args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
  url = new URL(url, platform_default.origin);
  return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
})(
  new URL(platform_default.origin),
  platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
) : () => true;

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, prop, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils_default.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if (utils_default.isFunction(data.getHeaders)) {
      const formHeaders = data.getHeaders();
      const allowedHeaders = ["content-type", "content-length"];
      Object.entries(formHeaders).forEach(([key, val]) => {
        if (allowedHeaders.includes(key.toLowerCase())) {
          headers.set(key, val);
        }
      });
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError2(event) {
      const msg = event && event.message ? event.message : "Network Error";
      const err = new AxiosError_default(msg, AxiosError_default.ERR_NETWORK, config, request);
      err.event = event || null;
      reject(err);
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};

// node_modules/axios/lib/adapters/fetch.js
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var { isFunction: isFunction2 } = utils_default;
var globalFetchAPI = (({ Request, Response }) => ({
  Request,
  Response
}))(utils_default.global);
var {
  ReadableStream: ReadableStream2,
  TextEncoder: TextEncoder2
} = utils_default.global;
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
var factory = (env) => {
  env = utils_default.merge.call({
    skipUndefined: true
  }, globalFetchAPI, env);
  const { fetch: envFetch, Request, Response } = env;
  const isFetchSupported = envFetch ? isFunction2(envFetch) : typeof fetch === "function";
  const isRequestSupported = isFunction2(Request);
  const isResponseSupported = isFunction2(Response);
  if (!isFetchSupported) {
    return false;
  }
  const isReadableStreamSupported = isFetchSupported && isFunction2(ReadableStream2);
  const encodeText = isFetchSupported && (typeof TextEncoder2 === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder2()) : async (str) => new Uint8Array(await new Request(str).arrayBuffer()));
  const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {
    let duplexAccessed = false;
    const hasContentType = new Request(platform_default.origin, {
      body: new ReadableStream2(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  });
  const supportsResponseStream = isResponseSupported && isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
  const resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && (() => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
      !resolvers[type] && (resolvers[type] = (res, config) => {
        let method = res && res[type];
        if (method) {
          return method.call(res);
        }
        throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
      });
    });
  })();
  const getBodyLength = async (body) => {
    if (body == null) {
      return 0;
    }
    if (utils_default.isBlob(body)) {
      return body.size;
    }
    if (utils_default.isSpecCompliantForm(body)) {
      const _request = new Request(platform_default.origin, {
        method: "POST",
        body
      });
      return (await _request.arrayBuffer()).byteLength;
    }
    if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
      return body.byteLength;
    }
    if (utils_default.isURLSearchParams(body)) {
      body = body + "";
    }
    if (utils_default.isString(body)) {
      return (await encodeText(body)).byteLength;
    }
  };
  const resolveBodyLength = async (headers, body) => {
    const length = utils_default.toFiniteNumber(headers.getContentLength());
    return length == null ? getBodyLength(body) : length;
  };
  return async (config) => {
    let {
      url,
      method,
      data,
      signal,
      cancelToken,
      timeout,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig_default(config);
    let _fetch = envFetch || fetch;
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
    let request = null;
    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
    });
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
        let _request = new Request(url, {
          method: "POST",
          body: data,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );
          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
        }
      }
      if (!utils_default.isString(withCredentials)) {
        withCredentials = withCredentials ? "include" : "omit";
      }
      const isCredentialsSupported = isRequestSupported && "credentials" in Request.prototype;
      const resolvedOptions = {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : void 0
      };
      request = isRequestSupported && new Request(url, resolvedOptions);
      let response = await (isRequestSupported ? _fetch(request, fetchOptions) : _fetch(url, resolvedOptions));
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response[prop];
        });
        const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];
        response = new Response(
          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }),
          options
        );
      }
      responseType = responseType || "text";
      let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
      !isStreamResponse && unsubscribe && unsubscribe();
      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders_default.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request
        });
      });
    } catch (err) {
      unsubscribe && unsubscribe();
      if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
          {
            cause: err.cause || err
          }
        );
      }
      throw AxiosError_default.from(err, err && err.code, config, request);
    }
  };
};
var seedCache = /* @__PURE__ */ new Map();
var getFetch = (config) => {
  let env = config ? config.env : {};
  const { fetch: fetch2, Request, Response } = env;
  const seeds = [
    Request,
    Response,
    fetch2
  ];
  let len = seeds.length, i = len, seed, target, map = seedCache;
  while (i--) {
    seed = seeds[i];
    target = map.get(seed);
    target === void 0 && map.set(seed, target = i ? /* @__PURE__ */ new Map() : factory(env));
    map = target;
  }
  return target;
};
var adapter = getFetch();

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: {
    get: getFetch
  }
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter2) => utils_default.isFunction(adapter2) || adapter2 === null || adapter2 === false;
var adapters_default = {
  getAdapter: (adapters, config) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter2;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter2 = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter2 = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter2 === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter2 && (utils_default.isFunction(adapter2) || (adapter2 = adapter2.get(config)))) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter2;
    }
    if (!adapter2) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter2;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter2 = adapters_default.getAdapter(config.adapter || defaults_default.adapter, config);
  return adapter2(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.12.2";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== void 0) {
    } else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator_default.assertOptions(config, {
      baseUrl: validators2.spelling("baseURL"),
      withXsrfToken: validators2.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift(...requestInterceptorChain);
      chain.push(...responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@coze/api/dist/esm/index.mjs
var __WEBPACK_EXTERNAL_MODULE_ws__ = __toESM(require_ws(), 1);

// node_modules/reconnecting-websocket/dist/reconnecting-websocket-mjs.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
  if (m) return m.call(o);
  return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
var Event = (
  /** @class */
  /* @__PURE__ */ function() {
    function Event2(type, target) {
      this.target = target;
      this.type = type;
    }
    return Event2;
  }()
);
var ErrorEvent = (
  /** @class */
  function(_super) {
    __extends(ErrorEvent2, _super);
    function ErrorEvent2(error, target) {
      var _this = _super.call(this, "error", target) || this;
      _this.message = error.message;
      _this.error = error;
      return _this;
    }
    return ErrorEvent2;
  }(Event)
);
var CloseEvent = (
  /** @class */
  function(_super) {
    __extends(CloseEvent2, _super);
    function CloseEvent2(code, reason, target) {
      if (code === void 0) {
        code = 1e3;
      }
      if (reason === void 0) {
        reason = "";
      }
      var _this = _super.call(this, "close", target) || this;
      _this.wasClean = true;
      _this.code = code;
      _this.reason = reason;
      return _this;
    }
    return CloseEvent2;
  }(Event)
);
var getGlobalWebSocket = function() {
  if (typeof WebSocket !== "undefined") {
    return WebSocket;
  }
};
var isWebSocket = function(w) {
  return typeof w !== "undefined" && !!w && w.CLOSING === 2;
};
var DEFAULT = {
  maxReconnectionDelay: 1e4,
  minReconnectionDelay: 1e3 + Math.random() * 4e3,
  minUptime: 5e3,
  reconnectionDelayGrowFactor: 1.3,
  connectionTimeout: 4e3,
  maxRetries: Infinity,
  maxEnqueuedMessages: Infinity,
  startClosed: false,
  debug: false
};
var ReconnectingWebSocket = (
  /** @class */
  function() {
    function ReconnectingWebSocket2(url, protocols, options) {
      var _this = this;
      if (options === void 0) {
        options = {};
      }
      this._listeners = {
        error: [],
        message: [],
        open: [],
        close: []
      };
      this._retryCount = -1;
      this._shouldReconnect = true;
      this._connectLock = false;
      this._binaryType = "blob";
      this._closeCalled = false;
      this._messageQueue = [];
      this.onclose = null;
      this.onerror = null;
      this.onmessage = null;
      this.onopen = null;
      this._handleOpen = function(event) {
        _this._debug("open event");
        var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;
        clearTimeout(_this._connectTimeout);
        _this._uptimeTimeout = setTimeout(function() {
          return _this._acceptOpen();
        }, minUptime);
        _this._ws.binaryType = _this._binaryType;
        _this._messageQueue.forEach(function(message) {
          return _this._ws.send(message);
        });
        _this._messageQueue = [];
        if (_this.onopen) {
          _this.onopen(event);
        }
        _this._listeners.open.forEach(function(listener) {
          return _this._callEventListener(event, listener);
        });
      };
      this._handleMessage = function(event) {
        _this._debug("message event");
        if (_this.onmessage) {
          _this.onmessage(event);
        }
        _this._listeners.message.forEach(function(listener) {
          return _this._callEventListener(event, listener);
        });
      };
      this._handleError = function(event) {
        _this._debug("error event", event.message);
        _this._disconnect(void 0, event.message === "TIMEOUT" ? "timeout" : void 0);
        if (_this.onerror) {
          _this.onerror(event);
        }
        _this._debug("exec error listeners");
        _this._listeners.error.forEach(function(listener) {
          return _this._callEventListener(event, listener);
        });
        _this._connect();
      };
      this._handleClose = function(event) {
        _this._debug("close event");
        _this._clearTimeouts();
        if (_this._shouldReconnect) {
          _this._connect();
        }
        if (_this.onclose) {
          _this.onclose(event);
        }
        _this._listeners.close.forEach(function(listener) {
          return _this._callEventListener(event, listener);
        });
      };
      this._url = url;
      this._protocols = protocols;
      this._options = options;
      if (this._options.startClosed) {
        this._shouldReconnect = false;
      }
      this._connect();
    }
    Object.defineProperty(ReconnectingWebSocket2, "CONNECTING", {
      get: function() {
        return 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2, "OPEN", {
      get: function() {
        return 1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2, "CLOSING", {
      get: function() {
        return 2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2, "CLOSED", {
      get: function() {
        return 3;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "CONNECTING", {
      get: function() {
        return ReconnectingWebSocket2.CONNECTING;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "OPEN", {
      get: function() {
        return ReconnectingWebSocket2.OPEN;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "CLOSING", {
      get: function() {
        return ReconnectingWebSocket2.CLOSING;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "CLOSED", {
      get: function() {
        return ReconnectingWebSocket2.CLOSED;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "binaryType", {
      get: function() {
        return this._ws ? this._ws.binaryType : this._binaryType;
      },
      set: function(value) {
        this._binaryType = value;
        if (this._ws) {
          this._ws.binaryType = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "retryCount", {
      /**
       * Returns the number or connection retries
       */
      get: function() {
        return Math.max(this._retryCount, 0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "bufferedAmount", {
      /**
       * The number of bytes of data that have been queued using calls to send() but not yet
       * transmitted to the network. This value resets to zero once all queued data has been sent.
       * This value does not reset to zero when the connection is closed; if you keep calling send(),
       * this will continue to climb. Read only
       */
      get: function() {
        var bytes = this._messageQueue.reduce(function(acc, message) {
          if (typeof message === "string") {
            acc += message.length;
          } else if (message instanceof Blob) {
            acc += message.size;
          } else {
            acc += message.byteLength;
          }
          return acc;
        }, 0);
        return bytes + (this._ws ? this._ws.bufferedAmount : 0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "extensions", {
      /**
       * The extensions selected by the server. This is currently only the empty string or a list of
       * extensions as negotiated by the connection
       */
      get: function() {
        return this._ws ? this._ws.extensions : "";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "protocol", {
      /**
       * A string indicating the name of the sub-protocol the server selected;
       * this will be one of the strings specified in the protocols parameter when creating the
       * WebSocket object
       */
      get: function() {
        return this._ws ? this._ws.protocol : "";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "readyState", {
      /**
       * The current state of the connection; this is one of the Ready state constants
       */
      get: function() {
        if (this._ws) {
          return this._ws.readyState;
        }
        return this._options.startClosed ? ReconnectingWebSocket2.CLOSED : ReconnectingWebSocket2.CONNECTING;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket2.prototype, "url", {
      /**
       * The URL as resolved by the constructor
       */
      get: function() {
        return this._ws ? this._ws.url : "";
      },
      enumerable: true,
      configurable: true
    });
    ReconnectingWebSocket2.prototype.close = function(code, reason) {
      if (code === void 0) {
        code = 1e3;
      }
      this._closeCalled = true;
      this._shouldReconnect = false;
      this._clearTimeouts();
      if (!this._ws) {
        this._debug("close enqueued: no ws instance");
        return;
      }
      if (this._ws.readyState === this.CLOSED) {
        this._debug("close: already closed");
        return;
      }
      this._ws.close(code, reason);
    };
    ReconnectingWebSocket2.prototype.reconnect = function(code, reason) {
      this._shouldReconnect = true;
      this._closeCalled = false;
      this._retryCount = -1;
      if (!this._ws || this._ws.readyState === this.CLOSED) {
        this._connect();
      } else {
        this._disconnect(code, reason);
        this._connect();
      }
    };
    ReconnectingWebSocket2.prototype.send = function(data) {
      if (this._ws && this._ws.readyState === this.OPEN) {
        this._debug("send", data);
        this._ws.send(data);
      } else {
        var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;
        if (this._messageQueue.length < maxEnqueuedMessages) {
          this._debug("enqueue", data);
          this._messageQueue.push(data);
        }
      }
    };
    ReconnectingWebSocket2.prototype.addEventListener = function(type, listener) {
      if (this._listeners[type]) {
        this._listeners[type].push(listener);
      }
    };
    ReconnectingWebSocket2.prototype.dispatchEvent = function(event) {
      var e_1, _a;
      var listeners = this._listeners[event.type];
      if (listeners) {
        try {
          for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
            var listener = listeners_1_1.value;
            this._callEventListener(event, listener);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      return true;
    };
    ReconnectingWebSocket2.prototype.removeEventListener = function(type, listener) {
      if (this._listeners[type]) {
        this._listeners[type] = this._listeners[type].filter(function(l) {
          return l !== listener;
        });
      }
    };
    ReconnectingWebSocket2.prototype._debug = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (this._options.debug) {
        console.log.apply(console, __spread(["RWS>"], args));
      }
    };
    ReconnectingWebSocket2.prototype._getNextDelay = function() {
      var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;
      var delay = 0;
      if (this._retryCount > 0) {
        delay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);
        if (delay > maxReconnectionDelay) {
          delay = maxReconnectionDelay;
        }
      }
      this._debug("next delay", delay);
      return delay;
    };
    ReconnectingWebSocket2.prototype._wait = function() {
      var _this = this;
      return new Promise(function(resolve) {
        setTimeout(resolve, _this._getNextDelay());
      });
    };
    ReconnectingWebSocket2.prototype._getNextUrl = function(urlProvider) {
      if (typeof urlProvider === "string") {
        return Promise.resolve(urlProvider);
      }
      if (typeof urlProvider === "function") {
        var url = urlProvider();
        if (typeof url === "string") {
          return Promise.resolve(url);
        }
        if (!!url.then) {
          return url;
        }
      }
      throw Error("Invalid URL");
    };
    ReconnectingWebSocket2.prototype._connect = function() {
      var _this = this;
      if (this._connectLock || !this._shouldReconnect) {
        return;
      }
      this._connectLock = true;
      var _a = this._options, _b = _a.maxRetries, maxRetries = _b === void 0 ? DEFAULT.maxRetries : _b, _c = _a.connectionTimeout, connectionTimeout = _c === void 0 ? DEFAULT.connectionTimeout : _c, _d = _a.WebSocket, WebSocket2 = _d === void 0 ? getGlobalWebSocket() : _d;
      if (this._retryCount >= maxRetries) {
        this._debug("max retries reached", this._retryCount, ">=", maxRetries);
        return;
      }
      this._retryCount++;
      this._debug("connect", this._retryCount);
      this._removeListeners();
      if (!isWebSocket(WebSocket2)) {
        throw Error("No valid WebSocket class provided");
      }
      this._wait().then(function() {
        return _this._getNextUrl(_this._url);
      }).then(function(url) {
        if (_this._closeCalled) {
          return;
        }
        _this._debug("connect", { url, protocols: _this._protocols });
        _this._ws = _this._protocols ? new WebSocket2(url, _this._protocols) : new WebSocket2(url);
        _this._ws.binaryType = _this._binaryType;
        _this._connectLock = false;
        _this._addListeners();
        _this._connectTimeout = setTimeout(function() {
          return _this._handleTimeout();
        }, connectionTimeout);
      });
    };
    ReconnectingWebSocket2.prototype._handleTimeout = function() {
      this._debug("timeout event");
      this._handleError(new ErrorEvent(Error("TIMEOUT"), this));
    };
    ReconnectingWebSocket2.prototype._disconnect = function(code, reason) {
      if (code === void 0) {
        code = 1e3;
      }
      this._clearTimeouts();
      if (!this._ws) {
        return;
      }
      this._removeListeners();
      try {
        this._ws.close(code, reason);
        this._handleClose(new CloseEvent(code, reason, this));
      } catch (error) {
      }
    };
    ReconnectingWebSocket2.prototype._acceptOpen = function() {
      this._debug("accept open");
      this._retryCount = 0;
    };
    ReconnectingWebSocket2.prototype._callEventListener = function(event, listener) {
      if ("handleEvent" in listener) {
        listener.handleEvent(event);
      } else {
        listener(event);
      }
    };
    ReconnectingWebSocket2.prototype._removeListeners = function() {
      if (!this._ws) {
        return;
      }
      this._debug("removeListeners");
      this._ws.removeEventListener("open", this._handleOpen);
      this._ws.removeEventListener("close", this._handleClose);
      this._ws.removeEventListener("message", this._handleMessage);
      this._ws.removeEventListener("error", this._handleError);
    };
    ReconnectingWebSocket2.prototype._addListeners = function() {
      if (!this._ws) {
        return;
      }
      this._debug("addListeners");
      this._ws.addEventListener("open", this._handleOpen);
      this._ws.addEventListener("close", this._handleClose);
      this._ws.addEventListener("message", this._handleMessage);
      this._ws.addEventListener("error", this._handleError);
    };
    ReconnectingWebSocket2.prototype._clearTimeouts = function() {
      clearTimeout(this._connectTimeout);
      clearTimeout(this._uptimeTimeout);
    };
    return ReconnectingWebSocket2;
  }()
);
var reconnecting_websocket_mjs_default = ReconnectingWebSocket;

// node_modules/@coze/api/dist/esm/index.mjs
var __WEBPACK_EXTERNAL_MODULE_os__ = __toESM(require_os(), 1);
var __WEBPACK_EXTERNAL_MODULE_node_fetch__ = __toESM(require_node_fetch(), 1);
var __WEBPACK_EXTERNAL_MODULE_crypto__ = __toESM(require_crypto(), 1);
var __WEBPACK_EXTERNAL_MODULE_jsonwebtoken__ = __toESM(require_jsonwebtoken(), 1);
var APIResource = class {
  constructor(client) {
    this._client = client;
  }
};
var Bots = class extends APIResource {
  /**
  * Create a new agent. | 调用接口创建一个新的智能体。
  * @docs en:https://www.coze.com/docs/developer_guides/create_bot?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/create_bot?_lang=zh
  * @param params - Required The parameters for creating a bot. | 创建 Bot 的参数。
  * @param params.space_id - Required The Space ID of the space where the agent is located. | Bot 所在的空间的 Space ID。
  * @param params.name - Required The name of the agent. It should be 1 to 20 characters long. | Bot 的名称。
  * @param params.description - Optional The description of the agent. It can be 0 to 500 characters long. | Bot 的描述信息。
  * @param params.icon_file_id - Optional The file ID for the agent's avatar. | 作为智能体头像的文件 ID。
  * @param params.prompt_info - Optional The personality and reply logic of the agent. | Bot 的提示词配置。
  * @param params.onboarding_info - Optional The settings related to the agent's opening remarks. | Bot 的开场白配置。
  * @returns Information about the created bot. | 创建的 Bot 信息。
  */
  async create(params, options) {
    const apiUrl = "/v1/bot/create";
    const result = await this._client.post(apiUrl, params, false, options);
    return result.data;
  }
  /**
  * Update the configuration of an agent. | 调用接口修改智能体的配置。
  * @docs en:https://www.coze.com/docs/developer_guides/update_bot?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/update_bot?_lang=zh
  * @param params - Required The parameters for updating a bot. | 修改 Bot 的参数。
  * @param params.bot_id - Required The ID of the agent that the API interacts with. | 待修改配置的智能体ID。
  * @param params.name - Optional The name of the agent. | Bot 的名称。
  * @param params.description - Optional The description of the agent. | Bot 的描述信息。
  * @param params.icon_file_id - Optional The file ID for the agent's avatar. | 作为智能体头像的文件 ID。
  * @param params.prompt_info - Optional The personality and reply logic of the agent. | Bot 的提示词配置。
  * @param params.onboarding_info - Optional The settings related to the agent's opening remarks. | Bot 的开场白配置。
  * @param params.knowledge - Optional Knowledge configurations of the agent. | Bot 的知识库配置。
  * @returns Undefined | 无返回值
  */
  async update(params, options) {
    const apiUrl = "/v1/bot/update";
    const result = await this._client.post(apiUrl, params, false, options);
    return result.data;
  }
  /**
  * Get the agents published as API service. | 调用接口查看指定空间发布到 Agent as API 渠道的智能体列表。
  * @docs en:https://www.coze.com/docs/developer_guides/published_bots_list?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/published_bots_list?_lang=zh
  * @param params - Required The parameters for listing bots. | 列出 Bot 的参数。
  * @param params.space_id - Required The ID of the space. | Bot 所在的空间的 Space ID。
  * @param params.page_size - Optional Pagination size. | 分页大小。
  * @param params.page_index - Optional Page number for paginated queries. | 分页查询时的页码。
  * @returns List of published bots. | 已发布的 Bot 列表。
  * @deprecated Use listNew instead.
  */
  async list(params, options) {
    const apiUrl = "/v1/space/published_bots_list";
    const result = await this._client.get(apiUrl, params, false, options);
    return result.data;
  }
  /**
  * Get bots list. | 查看智能体列表
  */
  async listNew(params, options) {
    const apiUrl = "/v1/bots";
    const result = await this._client.get(apiUrl, params, false, options);
    return result.data;
  }
  /**
  * Publish the specified agent as an API service. | 调用接口创建一个新的智能体。
  * @docs en:https://www.coze.com/docs/developer_guides/publish_bot?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/publish_bot?_lang=zh
  * @param params - Required The parameters for publishing a bot. | 发布 Bot 的参数。
  * @param params.bot_id - Required The ID of the agent that the API interacts with. | 要发布的智能体ID。
  * @param params.connector_ids - Required The list of publishing channel IDs for the agent. | 智能体的发布渠道 ID 列表。
  * @returns Undefined | 无返回值
  */
  async publish(params, options) {
    const apiUrl = "/v1/bot/publish";
    const result = await this._client.post(apiUrl, params, false, options);
    return result.data;
  }
  /**
  * Get the configuration information of the agent. | 获取指定智能体的配置信息。
  * @docs en:https://www.coze.com/docs/developer_guides/get_metadata?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/get_metadata?_lang=zh
  * @param params - Required The parameters for retrieving a bot. | 获取 Bot 的参数。
  * @param params.bot_id - Required The ID of the agent that the API interacts with. | 要查看的智能体ID。
  * @returns Information about the bot. | Bot 的配置信息。
  * @deprecated Use retrieveNew instead.
  */
  async retrieve(params, options) {
    const apiUrl = "/v1/bot/get_online_info";
    const result = await this._client.get(apiUrl, params, false, options);
    return result.data;
  }
  /**
  * Get the configuration information of the agent. | 获取指定智能体的配置信息。
  * @param botId - Required The ID of the agent that the API interacts with. | 要查看的智能体ID。
  * @param params
  * @param options
  * @returns
  */
  async retrieveNew(botId, params, options) {
    const apiUrl = `/v1/bots/${botId}`;
    const result = await this._client.get(apiUrl, params, false, options);
    return result.data;
  }
};
var bots_SuggestReplyMode = function(SuggestReplyMode) {
  SuggestReplyMode["DISABLE"] = "disable";
  SuggestReplyMode["ENABLE"] = "enable";
  SuggestReplyMode["CUSTOMIZED"] = "customized";
  return SuggestReplyMode;
}({});
var bots_VariableType = function(VariableType) {
  VariableType["KVVariable"] = "KVVariable";
  VariableType["ListVariable"] = "ListVariable";
  return VariableType;
}({});
var bots_VariableChannel = function(VariableChannel) {
  VariableChannel["Custom"] = "custom";
  VariableChannel["System"] = "system";
  VariableChannel["Location"] = "location";
  VariableChannel["Feishu"] = "feishu";
  VariableChannel["APP"] = "app";
  return VariableChannel;
}({});
function safeJsonParse(jsonString) {
  let defaultValue = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    return defaultValue;
  }
}
function sleep(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}
function isUniApp() {
  return "undefined" != typeof uni;
}
function isBrowser() {
  return "undefined" != typeof window;
}
function isPlainObject2(obj) {
  if ("object" != typeof obj || null === obj) return false;
  const proto = Object.getPrototypeOf(obj);
  if (null === proto) return true;
  let baseProto = proto;
  while (null !== Object.getPrototypeOf(baseProto)) baseProto = Object.getPrototypeOf(baseProto);
  return proto === baseProto;
}
function mergeConfig3() {
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) objects[_key] = arguments[_key];
  return objects.reduce((result, obj) => {
    if (void 0 === obj) return result || {};
    for (const key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) {
      if (isPlainObject2(obj[key]) && !Array.isArray(obj[key])) result[key] = mergeConfig3(result[key] || {}, obj[key]);
      else result[key] = obj[key];
    }
    return result;
  }, {});
}
function isPersonalAccessToken(token) {
  return !!(null == token ? void 0 : token.startsWith("pat_"));
}
function buildWebsocketUrl(path, params) {
  const queryString = Object.entries(params || {}).filter((param) => {
    let [_, value] = param;
    return null != value && "" !== value;
  }).map((param) => {
    let [key, value] = param;
    return `${key}=${value}`;
  }).join("&");
  return `${path}${queryString ? `?${queryString}` : ""}`;
}
var isBrowserExtension = () => "undefined" != typeof chrome && !!chrome.runtime && !!chrome.runtime.id;
var CozeError = class extends Error {
};
var APIError = class _APIError extends CozeError {
  static makeMessage(status, errorBody, message, headers) {
    if (!errorBody && message) return message;
    if (errorBody) {
      const list = [];
      const { code, msg, error } = errorBody;
      if (code) list.push(`code: ${code}`);
      if (msg) list.push(`msg: ${msg}`);
      if ((null == error ? void 0 : error.detail) && msg !== error.detail) list.push(`detail: ${error.detail}`);
      const logId = (null == error ? void 0 : error.logid) || (null == headers ? void 0 : headers["x-tt-logid"]);
      if (logId) list.push(`logid: ${logId}`);
      return list.join(", ");
    }
    if (status) return `http status code: ${status} (no body)`;
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) return new APIConnectionError({
      cause: castToError(errorResponse)
    });
    const error = errorResponse;
    if (400 === status || (null == error ? void 0 : error.code) === 4e3) return new BadRequestError(status, error, message, headers);
    if (401 === status || (null == error ? void 0 : error.code) === 4100) return new AuthenticationError(status, error, message, headers);
    if (403 === status || (null == error ? void 0 : error.code) === 4101) return new PermissionDeniedError(status, error, message, headers);
    if (404 === status || (null == error ? void 0 : error.code) === 4200) return new NotFoundError(status, error, message, headers);
    if (429 === status || (null == error ? void 0 : error.code) === 4013) return new RateLimitError(status, error, message, headers);
    if (408 === status) return new TimeoutError(status, error, message, headers);
    if (502 === status) return new GatewayError(status, error, message, headers);
    if (status >= 500) return new InternalServerError(status, error, message, headers);
    return new _APIError(status, error, message, headers);
  }
  constructor(status, error, message, headers) {
    var _error_detail, _error_error;
    super(`${_APIError.makeMessage(status, error, message, headers)}`);
    this.status = status;
    this.headers = headers;
    this.logid = (null == error ? void 0 : null === (_error_detail = error.detail) || void 0 === _error_detail ? void 0 : _error_detail.logid) || (null == headers ? void 0 : headers["x-tt-logid"]);
    this.code = null == error ? void 0 : error.code;
    this.msg = null == error ? void 0 : error.msg;
    this.detail = null == error ? void 0 : null === (_error_error = error.error) || void 0 === _error_error ? void 0 : _error_error.detail;
    this.rawError = error;
  }
};
var APIConnectionError = class extends APIError {
  constructor({ message }) {
    super(void 0, void 0, message || "Connection error.", void 0), this.status = void 0;
  }
};
var APIUserAbortError = class extends APIError {
  constructor(message) {
    super(void 0, void 0, message || "Request was aborted.", void 0), this.name = "UserAbortError", this.status = void 0;
  }
};
var BadRequestError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "BadRequestError", this.status = 400;
  }
};
var AuthenticationError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "AuthenticationError", this.status = 401;
  }
};
var PermissionDeniedError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "PermissionDeniedError", this.status = 403;
  }
};
var NotFoundError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "NotFoundError", this.status = 404;
  }
};
var TimeoutError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "TimeoutError", this.status = 408;
  }
};
var RateLimitError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "RateLimitError", this.status = 429;
  }
};
var InternalServerError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "InternalServerError", this.status = 500;
  }
};
var GatewayError = class extends APIError {
  constructor(...args) {
    super(...args), this.name = "GatewayError", this.status = 502;
  }
};
var castToError = (err) => {
  if (err instanceof Error) return err;
  return new Error(err);
};
var JSONParseError = class extends Error {
  constructor({ message, cause }) {
    super(message);
    this.cause = cause;
  }
};
var Messages = class extends APIResource {
  /**
  * Get the list of messages in a chat. | 获取对话中的消息列表。
  * @docs en:https://www.coze.com/docs/developer_guides/chat_message_list?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/chat_message_list?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | 会话 ID。
  * @param chat_id - Required The ID of the chat. | 对话 ID。
  * @returns An array of chat messages. | 对话消息数组。
  */
  async list(conversation_id, chat_id, options) {
    const apiUrl = `/v3/chat/message/list?conversation_id=${conversation_id}&chat_id=${chat_id}`;
    const result = await this._client.get(apiUrl, void 0, false, options);
    return result.data;
  }
};
var uuid = () => (Math.random() * (/* @__PURE__ */ new Date()).getTime()).toString();
var handleAdditionalMessages = (additional_messages) => null == additional_messages ? void 0 : additional_messages.map((i) => ({
  ...i,
  content: "object" == typeof i.content ? JSON.stringify(i.content) : i.content
}));
var handleParameters = (parameters) => {
  if (parameters) {
    for (const [key, value] of Object.entries(parameters)) if ("object" == typeof value) parameters[key] = JSON.stringify(value);
  }
  return parameters;
};
var Chat = class extends APIResource {
  /**
  * Call the Chat API to send messages to a published Coze agent. | 调用此接口发起一次对话，支持添加上下文
  * @docs en:https://www.coze.com/docs/developer_guides/chat_v3?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/chat_v3?_lang=zh
  * @param params - Required The parameters for creating a chat session. | 创建会话的参数。
  * @param params.bot_id - Required The ID of the agent. | 要进行会话聊天的 Bot ID。
  * @param params.user_id - Optional The ID of the user interacting with the Bot. | 标识当前与 Bot 交互的用户。
  * @param params.additional_messages - Optional Additional messages for the conversation. | 对话的附加信息。
  * @param params.custom_variables - Optional Variables defined in the Bot. | Bot 中定义变量。
  * @param params.auto_save_history - Optional Whether to automatically save the conversation history. | 是否自动保存历史对话记录。
  * @param params.meta_data - Optional Additional metadata for the message. | 创建消息时的附加消息。
  * @param params.conversation_id - Optional The ID of the conversation. | 标识对话发生在哪一次会话中。
  * @param params.extra_params - Optional Extra parameters for the conversation. | 附加参数。
  * @param params.shortcut_command - Optional The shortcut command information. | 快捷指令信息。
  * @param params.parameters - Optional custom parameters. | 自定义参数。
  * @returns The data of the created chat. | 创建的对话数据。
  */
  async create(params, options) {
    if (!params.user_id) params.user_id = uuid();
    const { conversation_id, ...rest } = params;
    const apiUrl = `/v3/chat${conversation_id ? `?conversation_id=${conversation_id}` : ""}`;
    const payload = {
      ...rest,
      additional_messages: handleAdditionalMessages(params.additional_messages),
      shortcut_command: params.shortcut_command ? {
        ...params.shortcut_command,
        parameters: handleParameters(params.shortcut_command.parameters)
      } : void 0,
      stream: false
    };
    const result = await this._client.post(apiUrl, payload, false, options);
    return result.data;
  }
  /**
  * Call the Chat API to send messages to a published Coze agent. | 调用此接口发起一次对话，支持添加上下文
  * @docs en:https://www.coze.com/docs/developer_guides/chat_v3?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/chat_v3?_lang=zh
  * @param params - Required The parameters for creating a chat session. | 创建会话的参数。
  * @param params.bot_id - Required The ID of the agent. | 要进行会话聊天的 Bot ID。
  * @param params.user_id - Optional The ID of the user interacting with the Bot. | 标识当前与 Bot 交互的用户。
  * @param params.additional_messages - Optional Additional messages for the conversation. | 对话的附加信息。
  * @param params.custom_variables - Optional Variables defined in the Bot. | Bot 中定义的变量。
  * @param params.auto_save_history - Optional Whether to automatically save the conversation history. | 是否自动保存历史对话记录。
  * @param params.meta_data - Optional Additional metadata for the message. | 创建消息时的附加消息。
  * @param params.conversation_id - Optional The ID of the conversation. | 标识对话发生在哪一次会话中。
  * @param params.extra_params - Optional Extra parameters for the conversation. | 附加参数。
  * @param params.shortcut_command - Optional The shortcut command information. | 快捷指令信息。
  * @param params.parameters - Optional custom parameters. | 自定义参数。
  * @returns
  */
  async createAndPoll(params, options) {
    if (!params.user_id) params.user_id = uuid();
    const { conversation_id, ...rest } = params;
    const apiUrl = `/v3/chat${conversation_id ? `?conversation_id=${conversation_id}` : ""}`;
    const payload = {
      ...rest,
      additional_messages: handleAdditionalMessages(params.additional_messages),
      shortcut_command: params.shortcut_command ? {
        ...params.shortcut_command,
        parameters: handleParameters(params.shortcut_command.parameters)
      } : void 0,
      stream: false
    };
    const result = await this._client.post(apiUrl, payload, false, options);
    const chatId = result.data.id;
    const conversationId = result.data.conversation_id;
    let chat;
    while (true) {
      await sleep(100);
      chat = await this.retrieve(conversationId, chatId);
      if ("completed" === chat.status || "failed" === chat.status || "requires_action" === chat.status) break;
    }
    const messageList = await this.messages.list(conversationId, chatId);
    return {
      chat,
      messages: messageList
    };
  }
  /**
  * Call the Chat API to send messages to a published Coze agent with streaming response. | 调用此接口发起一次对话，支持流式响应。
  * @docs en:https://www.coze.com/docs/developer_guides/chat_v3?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/chat_v3?_lang=zh
  * @param params - Required The parameters for streaming a chat session. | 流式会话的参数。
  * @param params.bot_id - Required The ID of the agent. | 要进行会话聊天的 Bot ID。
  * @param params.user_id - Optional The ID of the user interacting with the Bot. | 标识当前与 Bot 交互的用户。
  * @param params.additional_messages - Optional Additional messages for the conversation. | 对话的附加信息。
  * @param params.custom_variables - Optional Variables defined in the Bot. | Bot 中定义的变量。
  * @param params.auto_save_history - Optional Whether to automatically save the conversation history. | 是否自动保存历史对话记录。
  * @param params.meta_data - Optional Additional metadata for the message. | 创建消息时的附加消息。
  * @param params.conversation_id - Optional The ID of the conversation. | 标识对话发生在哪一次会话中。
  * @param params.extra_params - Optional Extra parameters for the conversation. | 附加参数。
  * @param params.shortcut_command - Optional The shortcut command information. | 快捷指令信息。
  * @param params.parameters - Optional custom parameters. | 自定义参数。
  * @returns A stream of chat data. | 对话数据流。
  */
  async *stream(params, options) {
    if (!params.user_id) params.user_id = uuid();
    const { conversation_id, ...rest } = params;
    const apiUrl = `/v3/chat${conversation_id ? `?conversation_id=${conversation_id}` : ""}`;
    const payload = {
      ...rest,
      additional_messages: handleAdditionalMessages(params.additional_messages),
      shortcut_command: params.shortcut_command ? {
        ...params.shortcut_command,
        parameters: handleParameters(params.shortcut_command.parameters)
      } : void 0,
      stream: true
    };
    const result = await this._client.post(apiUrl, payload, true, options);
    for await (const message of result) if ("done" === message.event) {
      const ret = {
        event: message.event,
        data: "[DONE]"
      };
      yield ret;
    } else try {
      const ret = {
        event: message.event,
        data: JSON.parse(message.data)
      };
      yield ret;
    } catch (error) {
      throw new CozeError(`Could not parse message into JSON:${message.data}`);
    }
  }
  /**
  * Get the detailed information of the chat. | 查看对话的详细信息。
  * @docs en:https://www.coze.com/docs/developer_guides/retrieve_chat?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/retrieve_chat?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | 会话 ID。
  * @param chat_id - Required The ID of the chat. | 对话 ID。
  * @returns The data of the retrieved chat. | 检索到的对话数据。
  */
  async retrieve(conversation_id, chat_id, options) {
    const apiUrl = `/v3/chat/retrieve?conversation_id=${conversation_id}&chat_id=${chat_id}`;
    const result = await this._client.post(apiUrl, void 0, false, options);
    return result.data;
  }
  /**
  * Cancel a chat session. | 取消对话会话。
  * @docs en:https://www.coze.com/docs/developer_guides/cancel_chat?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/cancel_chat?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | 会话 ID。
  * @param chat_id - Required The ID of the chat. | 对话 ID。
  * @returns The data of the canceled chat. | 取消的对话数据。
  */
  async cancel(conversation_id, chat_id, options) {
    const apiUrl = "/v3/chat/cancel";
    const payload = {
      conversation_id,
      chat_id
    };
    const result = await this._client.post(apiUrl, payload, false, options);
    return result.data;
  }
  /**
  * Submit tool outputs for a chat session. | 提交对话会话的工具输出。
  * @docs en:https://www.coze.com/docs/developer_guides/chat_submit_tool_outputs?_lang=en
  * @docs zh:https://www.coze.cn/docs/developer_guides/chat_submit_tool_outputs?_lang=zh
  * @param params - Required Parameters for submitting tool outputs. | 提交工具输出的参数。
  * @param params.conversation_id - Required The ID of the conversation. | 会话 ID。
  * @param params.chat_id - Required The ID of the chat. | 对话 ID。
  * @param params.tool_outputs - Required The outputs of the tool. | 工具的输出。
  * @param params.stream - Optional Whether to use streaming response. | 是否使用流式响应。
  * @returns The data of the submitted tool outputs or a stream of chat data. | 提交的工具输出数据或对话数据流。
  */
  async *submitToolOutputs(params, options) {
    const { conversation_id, chat_id, ...rest } = params;
    const apiUrl = `/v3/chat/submit_tool_outputs?conversation_id=${params.conversation_id}&chat_id=${params.chat_id}`;
    const payload = {
      ...rest
    };
    if (false === params.stream) {
      const response = await this._client.post(apiUrl, payload, false, options);
      return response.data;
    }
    {
      const result = await this._client.post(apiUrl, payload, true, options);
      for await (const message of result) if ("done" === message.event) {
        const ret = {
          event: message.event,
          data: "[DONE]"
        };
        yield ret;
      } else try {
        const ret = {
          event: message.event,
          data: JSON.parse(message.data)
        };
        yield ret;
      } catch (error) {
        throw new CozeError(`Could not parse message into JSON:${message.data}`);
      }
    }
  }
  constructor(...args) {
    super(...args), this.messages = new Messages(this._client);
  }
};
var chat_ChatStatus = function(ChatStatus) {
  ChatStatus["CREATED"] = "created";
  ChatStatus["IN_PROGRESS"] = "in_progress";
  ChatStatus["COMPLETED"] = "completed";
  ChatStatus["FAILED"] = "failed";
  ChatStatus["REQUIRES_ACTION"] = "requires_action";
  ChatStatus["CANCELED"] = "canceled";
  ChatStatus["UNKNOWN"] = "unknown";
  return ChatStatus;
}({});
var chat_ChatEventType = function(ChatEventType) {
  ChatEventType["CONVERSATION_CHAT_CREATED"] = "conversation.chat.created";
  ChatEventType["CONVERSATION_CHAT_IN_PROGRESS"] = "conversation.chat.in_progress";
  ChatEventType["CONVERSATION_CHAT_COMPLETED"] = "conversation.chat.completed";
  ChatEventType["CONVERSATION_CHAT_FAILED"] = "conversation.chat.failed";
  ChatEventType["CONVERSATION_CHAT_REQUIRES_ACTION"] = "conversation.chat.requires_action";
  ChatEventType["CONVERSATION_MESSAGE_DELTA"] = "conversation.message.delta";
  ChatEventType["CONVERSATION_MESSAGE_COMPLETED"] = "conversation.message.completed";
  ChatEventType["CONVERSATION_AUDIO_DELTA"] = "conversation.audio.delta";
  ChatEventType["DONE"] = "done";
  ChatEventType["ERROR"] = "error";
  return ChatEventType;
}({});
var chat_RoleType = function(RoleType) {
  RoleType["User"] = "user";
  RoleType["Assistant"] = "assistant";
  return RoleType;
}({});
var messages_Messages = class extends APIResource {
  /**
  * Create a message and add it to the specified conversation. | 创建一条消息，并将其添加到指定的会话中。
  * @docs en: https://www.coze.com/docs/developer_guides/create_message?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/create_message?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @param params - Required The parameters for creating a message | 创建消息所需的参数
  * @param params.role - Required The entity that sent this message. Possible values: user, assistant. | 发送这条消息的实体。取值：user, assistant。
  * @param params.content - Required The content of the message. | 消息的内容。
  * @param params.content_type - Required The type of the message content. | 消息内容的类型。
  * @param params.meta_data - Optional Additional information when creating a message. | 创建消息时的附加消息。
  * @returns Information about the new message. | 消息详情。
  */
  async create(conversation_id, params, options) {
    const apiUrl = `/v1/conversation/message/create?conversation_id=${conversation_id}`;
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Modify a message, supporting the modification of message content, additional content, and message type. | 修改一条消息，支持修改消息内容、附加内容和消息类型。
  * @docs en: https://www.coze.com/docs/developer_guides/modify_message?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/modify_message?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @param message_id - Required The ID of the message. | Message ID，即消息的唯一标识。
  * @param params - Required The parameters for modifying a message | 修改消息所需的参数
  * @param params.meta_data - Optional Additional information when modifying a message. | 修改消息时的附加消息。
  * @param params.content - Optional The content of the message. | 消息的内容。
  * @param params.content_type - Optional The type of the message content. | 消息内容的类型。
  * @returns Information about the modified message. | 消息详情。
  */
  // eslint-disable-next-line max-params
  async update(conversation_id, message_id, params, options) {
    const apiUrl = `/v1/conversation/message/modify?conversation_id=${conversation_id}&message_id=${message_id}`;
    const response = await this._client.post(apiUrl, params, false, options);
    return response.message;
  }
  /**
  * Get the detailed information of specified message. | 查看指定消息的详细信息。
  * @docs en: https://www.coze.com/docs/developer_guides/retrieve_message?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/retrieve_message?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @param message_id - Required The ID of the message. | Message ID，即消息的唯一标识。
  * @returns Information about the message. | 消息详情。
  */
  async retrieve(conversation_id, message_id, options) {
    const apiUrl = `/v1/conversation/message/retrieve?conversation_id=${conversation_id}&message_id=${message_id}`;
    const response = await this._client.get(apiUrl, null, false, options);
    return response.data;
  }
  /**
  * List messages in a conversation. | 列出会话中的消息。
  * @docs en: https://www.coze.com/docs/developer_guides/message_list?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/message_list?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @param params - Optional The parameters for listing messages | 列出消息所需的参数
  * @param params.order - Optional The order of the messages. | 消息的顺序。
  * @param params.chat_id - Optional The ID of the chat. | 聊天 ID。
  * @param params.before_id - Optional The ID of the message before which to list. | 列出此消息之前的消息 ID。
  * @param params.after_id - Optional The ID of the message after which to list. | 列出此消息之后的消息 ID。
  * @param params.limit - Optional The maximum number of messages to return. | 返回的最大消息数。
  * @returns A list of messages. | 消息列表。
  */
  async list(conversation_id, params, options) {
    const apiUrl = `/v1/conversation/message/list?conversation_id=${conversation_id}`;
    const response = await this._client.post(apiUrl, params, false, options);
    return response;
  }
  /**
  * Call the API to delete a message within a specified conversation. | 调用接口在指定会话中删除消息。
  * @docs en: https://www.coze.com/docs/developer_guides/delete_message?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/delete_message?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @param message_id - Required The ID of the message. | Message ID，即消息的唯一标识。
  * @returns Details of the deleted message. | 已删除的消息详情。
  */
  async delete(conversation_id, message_id, options) {
    const apiUrl = `/v1/conversation/message/delete?conversation_id=${conversation_id}&message_id=${message_id}`;
    const response = await this._client.post(apiUrl, void 0, false, options);
    return response.data;
  }
};
var Conversations = class extends APIResource {
  /**
  * Create a conversation. Conversation is an interaction between an agent and a user, including one or more messages. | 调用接口创建一个会话。
  * @docs en: https://www.coze.com/docs/developer_guides/create_conversation?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/create_conversation?_lang=zh
  * @param params - Required The parameters for creating a conversation | 创建会话所需的参数
  * @param params.messages - Optional Messages in the conversation. | 会话中的消息内容。
  * @param params.meta_data - Optional Additional information when creating a message. | 创建消息时的附加消息。
  * @param params.bot_id - Optional Bind and isolate conversation on different bots. | 绑定和隔离不同Bot的会话。
  * @returns Information about the created conversation. | 会话的基础信息。
  */
  async create(params, options) {
    const apiUrl = "/v1/conversation/create";
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Get the information of specific conversation. | 通过会话 ID 查看会话信息。
  * @docs en: https://www.coze.com/docs/developer_guides/retrieve_conversation?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/retrieve_conversation?_lang=zh
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @returns Information about the conversation. | 会话的基础信息。
  */
  async retrieve(conversation_id, options) {
    const apiUrl = `/v1/conversation/retrieve?conversation_id=${conversation_id}`;
    const response = await this._client.get(apiUrl, null, false, options);
    return response.data;
  }
  /**
  * List all conversations. | 列出 Bot 下所有会话。
  * @param params
  * @param params.bot_id - Required Bot ID. | Bot ID。
  * @param params.page_num - Optional The page number. | 页码，默认值为 1。
  * @param params.page_size - Optional The number of conversations per page. | 每页的会话数量，默认值为 50。
  * @returns Information about the conversations. | 会话的信息。
  */
  async list(params, options) {
    const apiUrl = "/v1/conversations";
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Clear a conversation. | 清空会话。
  * @param conversation_id - Required The ID of the conversation. | Conversation ID，即会话的唯一标识。
  * @returns Information about the conversation session. | 会话的会话 ID。
  */
  async clear(conversation_id, options) {
    const apiUrl = `/v1/conversations/${conversation_id}/clear`;
    const response = await this._client.post(apiUrl, null, false, options);
    return response.data;
  }
  constructor(...args) {
    super(...args), this.messages = new messages_Messages(this._client);
  }
};
var Files = class extends APIResource {
  /**
  * Upload files to Coze platform. | 调用接口上传文件到扣子。
  * @docs en: https://www.coze.com/docs/developer_guides/upload_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/upload_files?_lang=zh
  * @param params - Required The parameters for file upload | 上传文件所需的参数
  * @param params.file - Required The file to be uploaded. | 需要上传的文件。
  * @returns Information about the new file. | 已上传的文件信息。
  */
  async upload(params, options) {
    const apiUrl = "/v1/files/upload";
    const response = await this._client.post(apiUrl, (0, toFormData2)(params), false, options);
    return response.data;
  }
  /**
  * Get the information of the specific file uploaded to Coze platform. | 查看已上传的文件详情。
  * @docs en: https://www.coze.com/docs/developer_guides/retrieve_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/retrieve_files?_lang=zh
  * @param file_id - Required The ID of the uploaded file. | 已上传的文件 ID。
  * @returns Information about the uploaded file. | 已上传的文件信息。
  */
  async retrieve(file_id, options) {
    const apiUrl = `/v1/files/retrieve?file_id=${file_id}`;
    const response = await this._client.get(apiUrl, null, false, options);
    return response.data;
  }
};
var Runs = class extends APIResource {
  /**
  * Initiates a workflow run. | 启动工作流运行。
  * @docs en: https://www.coze.com/docs/developer_guides/workflow_run?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/workflow_run?_lang=zh
  * @param params.workflow_id - Required The ID of the workflow to run. | 必选 要运行的工作流 ID。
  * @param params.bot_id - Optional The ID of the bot associated with the workflow. | 可选 与工作流关联的机器人 ID。
  * @param params.parameters - Optional Parameters for the workflow execution. | 可选 工作流执行的参数。
  * @param params.ext - Optional Additional information for the workflow execution. | 可选 工作流执行的附加信息。
  * @param params.execute_mode - Optional The mode in which to execute the workflow. | 可选 工作流执行的模式。
  * @param params.connector_id - Optional The ID of the connector to use for the workflow. | 可选 用于工作流的连接器 ID。
  * @param params.app_id - Optional The ID of the app.  | 可选 要进行会话聊天的 App ID
  * @returns RunWorkflowData | 工作流运行数据
  */
  async create(params, options) {
    const apiUrl = "/v1/workflow/run";
    const response = await this._client.post(apiUrl, params, false, options);
    return response;
  }
  /**
  * Streams the workflow run events. | 流式传输工作流运行事件。
  * @docs en: https://www.coze.com/docs/developer_guides/workflow_stream_run?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/workflow_stream_run?_lang=zh
  * @param params.workflow_id - Required The ID of the workflow to run. | 必选 要运行的工作流 ID。
  * @param params.bot_id - Optional The ID of the bot associated with the workflow. | 可选 与工作流关联的机器人 ID。
  * @param params.parameters - Optional Parameters for the workflow execution. | 可选 工作流执行的参数。
  * @param params.ext - Optional Additional information for the workflow execution. | 可选 工作流执行的附加信息。
  * @param params.execute_mode - Optional The mode in which to execute the workflow. | 可选 工作流执行的模式。
  * @param params.connector_id - Optional The ID of the connector to use for the workflow. | 可选 用于工作流的连接器 ID。
  * @param params.app_id - Optional The ID of the app.  | 可选 要进行会话聊天的 App ID
  * @returns Stream<WorkflowEvent, { id: string; event: string; data: string }> | 工作流事件流
  */
  async *stream(params, options) {
    const apiUrl = "/v1/workflow/stream_run";
    const result = await this._client.post(apiUrl, params, true, options);
    for await (const message of result) try {
      if ("Done" === message.event) yield new WorkflowEvent(Number(message.id), "Done");
      else yield new WorkflowEvent(Number(message.id), message.event, JSON.parse(message.data));
    } catch (error) {
      throw new CozeError(`Could not parse message into JSON:${message.data}`);
    }
  }
  /**
  * Resumes a paused workflow run. | 恢复暂停的工作流运行。
  * @docs en: https://www.coze.com/docs/developer_guides/workflow_resume?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/workflow_resume?_lang=zh
  * @param params.workflow_id - Required The ID of the workflow to resume. | 必选 要恢复的工作流 ID。
  * @param params.event_id - Required The ID of the event to resume from. | 必选 要从中恢复的事件 ID。
  * @param params.resume_data - Required Data needed to resume the workflow. | 必选 恢复工作流所需的数据。
  * @param params.interrupt_type - Required The type of interruption to resume from. | 必选 要恢复的中断类型。
  * @returns AsyncGenerator<WorkflowEvent, { id: string; event: string; data: string }> | 工作流事件流
  */
  async *resume(params, options) {
    const apiUrl = "/v1/workflow/stream_resume";
    const result = await this._client.post(apiUrl, params, true, options);
    for await (const message of result) try {
      if ("Done" === message.event) yield new WorkflowEvent(Number(message.id), "Done");
      else yield new WorkflowEvent(Number(message.id), message.event, JSON.parse(message.data));
    } catch (error) {
      throw new CozeError(`Could not parse message into JSON:${message.data}`);
    }
  }
  /**
  * Get the workflow run history | 工作流异步运行后，查看执行结果
  * @docs zh: https://www.coze.cn/open/docs/developer_guides/workflow_history
  * @param workflowId - Required The ID of the workflow. | 必选 工作流 ID。
  * @param executeId - Required The ID of the workflow execution. | 必选 工作流执行 ID。
  * @returns WorkflowExecuteHistory[] | 工作流执行历史
  */
  async history(workflowId, executeId, options) {
    const apiUrl = `/v1/workflows/${workflowId}/run_histories/${executeId}`;
    const response = await this._client.get(apiUrl, void 0, false, options);
    return response.data;
  }
};
var runs_WorkflowEventType = function(WorkflowEventType) {
  WorkflowEventType["MESSAGE"] = "Message";
  WorkflowEventType["ERROR"] = "Error";
  WorkflowEventType["DONE"] = "Done";
  WorkflowEventType["INTERRUPT"] = "Interrupt";
  return WorkflowEventType;
}({});
var WorkflowEvent = class {
  constructor(id, event, data) {
    this.id = id;
    this.event = event;
    this.data = data;
  }
};
var WorkflowChat = class extends APIResource {
  /**
  * Execute a chat workflow. | 执行对话流
  * @docs en: https://www.coze.cn/docs/developer_guides/workflow_chat?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/workflow_chat?_lang=zh
  * @param params.workflow_id - Required The ID of the workflow to chat with. | 必选 要对话的工作流 ID。
  * @param params.additional_messages - Required Array of messages for the chat. | 必选 对话的消息数组。
  * @param params.parameters - Optional  Parameters for the workflow execution. | 必选 工作流执行的参数。
  * @param params.app_id - Optional The ID of the app. | 可选 应用 ID。
  * @param params.bot_id - Optional The ID of the bot. | 可选 Bot ID。
  * @param params.conversation_id - Optional The ID of the conversation. | 可选 会话 ID。
  * @param params.ext - Optional Additional information for the chat. | 可选 对话的附加信息。
  * @returns AsyncGenerator<StreamChatData> | 对话数据流
  */
  async *stream(params, options) {
    const apiUrl = "/v1/workflows/chat";
    const payload = {
      ...params,
      additional_messages: handleAdditionalMessages(params.additional_messages)
    };
    const result = await this._client.post(apiUrl, payload, true, options);
    for await (const message of result) if (message.event === chat_ChatEventType.DONE) {
      const ret = {
        event: message.event,
        data: "[DONE]"
      };
      yield ret;
    } else try {
      const ret = {
        event: message.event,
        data: JSON.parse(message.data)
      };
      yield ret;
    } catch (error) {
      throw new CozeError(`Could not parse message into JSON:${message.data}`);
    }
  }
};
var Workflows = class extends APIResource {
  constructor(...args) {
    super(...args), this.runs = new Runs(this._client), this.chat = new WorkflowChat(this._client);
  }
};
var WorkSpaces = class extends APIResource {
  /**
  * View the list of workspaces that the current Coze user has joined. | 查看当前扣子用户加入的空间列表。
  * @docs en: https://www.coze.com/docs/developer_guides/list_workspace?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/list_workspace?_lang=zh
  * @param params.page_num - Optional The page number for paginated queries. Default is 1.
  * | 可选 分页查询时的页码。默认为 1，即从第一页数据开始返回。
  * @param params.page_size - Optional The size of pagination. Default is 10. Maximum is 50. | 可选 分页大小。默认为 10，最大为 50。
  * @returns OpenSpaceData | 工作空间列表
  */
  async list(params, options) {
    const apiUrl = "/v1/workspaces";
    const response = await this._client.get(apiUrl, params, false, options);
    return safeJsonParse(response, response).data;
  }
};
var documents_headers = {
  "agw-js-conv": "str"
};
var Documents = class extends APIResource {
  /**
  * @deprecated  The method is deprecated and will be removed in a future version. Please use 'client.datasets.documents.list' instead.
  *
  * View the file list of a specified knowledge base, which includes lists of documents, spreadsheets, or images.
  * | 调用接口查看指定知识库的内容列表，即文件、表格或图像列表。
  * @docs en: https://www.coze.com/docs/developer_guides/list_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/list_knowledge_files?_lang=zh
  * @param params.dataset_id - Required The ID of the knowledge base. | 必选 待查看文件的知识库 ID。
  * @param params.page - Optional The page number for paginated queries. Default is 1. | 可选 分页查询时的页码。默认为 1。
  * @param params.page_size - Optional The size of pagination. Default is 10. | 可选 分页大小。默认为 10。
  * @returns ListDocumentData | 知识库文件列表
  */
  list(params, options) {
    const apiUrl = "/open_api/knowledge/document/list";
    const response = this._client.get(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_headers
    }));
    return response;
  }
  /**
  * @deprecated  The method is deprecated and will be removed in a future version. Please use 'client.datasets.documents.create' instead.
  *
  * Upload files to the specific knowledge. | 调用此接口向指定知识库中上传文件。
  * @docs en: https://www.coze.com/docs/developer_guides/create_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/create_knowledge_files?_lang=zh
  * @param params.dataset_id - Required The ID of the knowledge. | 必选 知识库 ID。
  * @param params.document_bases - Required The metadata information of the files awaiting upload. | 必选 待上传文件的元数据信息。
  * @param params.chunk_strategy - Required when uploading files to a new knowledge for the first time. Chunk strategy.
  * | 向新知识库首次上传文件时必选 分段规则。
  * @returns DocumentInfo[] | 已上传文件的基本信息
  */
  async create(params, options) {
    const apiUrl = "/open_api/knowledge/document/create";
    const response = await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_headers
    }));
    return response.document_infos;
  }
  /**
  * @deprecated  The method is deprecated and will be removed in a future version. Please use 'client.datasets.documents.delete' instead.
  *
  * Delete text, images, sheets, and other files in the knowledge base, supporting batch deletion.
  * | 删除知识库中的文本、图像、表格等文件，支持批量删除。
  * @docs en: https://www.coze.com/docs/developer_guides/delete_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/delete_knowledge_files?_lang=zh
  * @param params.document_ids - Required The list of knowledge base files to be deleted. | 必选 待删除的文件 ID。
  * @returns void | 无返回
  */
  async delete(params, options) {
    const apiUrl = "/open_api/knowledge/document/delete";
    await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_headers
    }));
  }
  /**
  * @deprecated  The method is deprecated and will be removed in a future version. Please use 'client.datasets.documents.update' instead.
  *
  * Modify the knowledge base file name and update strategy. | 调用接口修改知识库文件名称和更新策略。
  * @docs en: https://www.coze.com/docs/developer_guides/modify_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/modify_knowledge_files?_lang=zh
  * @param params.document_id - Required The ID of the knowledge base file. | 必选 待修改的知识库文件 ID。
  * @param params.document_name - Optional The new name of the knowledge base file. | 可选 知识库文件的新名称。
  * @param params.update_rule - Optional The update strategy for online web pages. | 可选 在线网页更新策略。
  * @returns void | 无返回
  */
  async update(params, options) {
    const apiUrl = "/open_api/knowledge/document/update";
    await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_headers
    }));
  }
};
var Knowledge = class extends APIResource {
  constructor(...args) {
    super(...args), /**
    * @deprecated
    */
    this.documents = new Documents(this._client);
  }
};
var documents_documents_headers = {
  "agw-js-conv": "str"
};
var documents_Documents = class extends APIResource {
  /**
  * View the file list of a specified knowledge base, which includes lists of documents, spreadsheets, or images.
  * | 调用接口查看指定知识库的内容列表，即文件、表格或图像列表。
  * @docs en: https://www.coze.com/docs/developer_guides/list_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/list_knowledge_files?_lang=zh
  * @param params.dataset_id - Required The ID of the knowledge base. | 必选 待查看文件的知识库 ID。
  * @param params.page - Optional The page number for paginated queries. Default is 1. | 可选 分页查询时的页码。默认为 1。
  * @param params.page_size - Optional The size of pagination. Default is 10. | 可选 分页大小。默认为 10。
  * @returns ListDocumentData | 知识库文件列表
  */
  async list(params, options) {
    const apiUrl = "/open_api/knowledge/document/list";
    const response = await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_documents_headers
    }));
    return response;
  }
  /**
  * Upload files to the specific knowledge. | 调用此接口向指定知识库中上传文件。
  * @docs en: https://www.coze.com/docs/developer_guides/create_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/create_knowledge_files?_lang=zh
  * @param params.dataset_id - Required The ID of the knowledge. | 必选 知识库 ID。
  * @param params.document_bases - Required The metadata information of the files awaiting upload. | 必选 待上传文件的元数据信息。
  * @param params.chunk_strategy - Required when uploading files to a new knowledge for the first time. Chunk strategy.
  * | 向新知识库首次上传文件时必选 分段规则。
  * @returns DocumentInfo[] | 已上传文件的基本信息
  */
  async create(params, options) {
    const apiUrl = "/open_api/knowledge/document/create";
    const response = await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_documents_headers
    }));
    return response.document_infos;
  }
  /**
  * Delete text, images, sheets, and other files in the knowledge base, supporting batch deletion.
  * | 删除知识库中的文本、图像、表格等文件，支持批量删除。
  * @docs en: https://www.coze.com/docs/developer_guides/delete_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/delete_knowledge_files?_lang=zh
  * @param params.document_ids - Required The list of knowledge base files to be deleted. | 必选 待删除的文件 ID。
  * @returns void | 无返回
  */
  async delete(params, options) {
    const apiUrl = "/open_api/knowledge/document/delete";
    await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_documents_headers
    }));
  }
  /**
  * Modify the knowledge base file name and update strategy. | 调用接口修改知识库文件名称和更新策略。
  * @docs en: https://www.coze.com/docs/developer_guides/modify_knowledge_files?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/modify_knowledge_files?_lang=zh
  * @param params.document_id - Required The ID of the knowledge base file. | 必选 待修改的知识库文件 ID。
  * @param params.document_name - Optional The new name of the knowledge base file. | 可选 知识库文件的新名称。
  * @param params.update_rule - Optional The update strategy for online web pages. | 可选 在线网页更新策略。
  * @returns void | 无返回
  */
  async update(params, options) {
    const apiUrl = "/open_api/knowledge/document/update";
    await this._client.post(apiUrl, params, false, mergeConfig3(options, {
      headers: documents_documents_headers
    }));
  }
};
var Images = class extends APIResource {
  /**
  * Update the description of an image in the knowledge base | 更新知识库中的图片描述
  * @docs en: https://www.coze.com/docs/developer_guides/developer_guides/update_image_caption?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/developer_guides/update_image_caption?_lang=zh
  * @param datasetId - The ID of the dataset | 必选 知识库 ID
  * @param documentId - The ID of the document | 必选 知识库文件 ID
  * @param params - The parameters for updating the image
  * @param params.caption - Required. The description of the image | 必选 图片的描述信息
  * @returns undefined
  */
  // eslint-disable-next-line max-params
  async update(datasetId, documentId, params, options) {
    const apiUrl = `/v1/datasets/${datasetId}/images/${documentId}`;
    await this._client.put(apiUrl, params, false, options);
  }
  /**
  * List images in the knowledge base | 列出知识库中的图片
  * @docs en: https://www.coze.com/docs/developer_guides/developer_guides/get_images?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/developer_guides/get_images?_lang=zh
  * @param datasetId - The ID of the dataset | 必选 知识库 ID
  * @param params - The parameters for listing images
  * @param params.page_num - Optional. Page number for pagination, minimum value is 1, defaults to 1 | 可选 分页查询时的页码。默认为 1。
  * @param params.page_size - Optional. Number of items per page, range 1-299, defaults to 10 | 可选 分页大小。默认为 10。
  * @param params.keyword - Optional. Search keyword for image descriptions | 可选 图片描述的搜索关键词。
  * @param params.has_caption - Optional. Filter for images with/without captions | 可选 是否过滤有/无描述的图片。
  */
  async list(datasetId, params, options) {
    const apiUrl = `/v1/datasets/${datasetId}/images`;
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
};
var Datasets = class extends APIResource {
  /**
  * Creates a new dataset | 创建数据集
  * @docs en: https://www.coze.com/docs/developer_guides/create_dataset?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/create_dataset?_lang=zh
  * @param params - The parameters for creating a dataset
  * @param {string} params.name - Required. Dataset name, maximum length of 100 characters | 必选 数据集名称，最大长度为 100 个字符
  * @param {string} params.space_id - Required. Space ID where the dataset belongs | 必选 数据集所属的空间 ID
  * @param {number} params.format_type - Required. Dataset type (0: Text type, 2: Image type) | 必选 数据集类型 (0: 文本类型, 2: 图片类型)
  * @param {string} [params.description] - Optional. Dataset description | 可选 数据集描述
  * @param {string} [params.file_id] - Optional. Dataset icon file ID from file upload
  */
  async create(params, options) {
    const apiUrl = "/v1/datasets";
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Lists all datasets in a space | 列出空间中的所有数据集
  * @docs en: https://www.coze.com/docs/developer_guides/list_dataset?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/list_dataset?_lang=zh
  * @param params - The parameters for listing datasets | 列出数据集的参数
  * @param {string} params.space_id - Required. Space ID where the datasets belong | 必选 数据集所属的空间 ID
  * @param {string} [params.name] - Optional. Dataset name for fuzzy search | 可选 数据集名称用于模糊搜索
  * @param {number} [params.format_type] - Optional. Dataset type (0: Text type, 2: Image type) | 可选 数据集类型 (0: 文本类型, 2: 图片类型)
  * @param {number} [params.page_num] - Optional. Page number for pagination (default: 1) | 可选 分页查询时的页码。默认为 1。
  * @param {number} [params.page_size] - Optional. Number of items per page (default: 10) | 可选 分页大小。默认为 10。
  */
  async list(params, options) {
    const apiUrl = "/v1/datasets";
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Updates a dataset | 更新数据集
  * @docs en: https://www.coze.com/docs/developer_guides/update_dataset?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/update_dataset?_lang=zh
  * @param dataset_id - Required. The ID of the dataset to update | 必选 数据集 ID
  * @param params - Required. The parameters for updating the dataset | 必选 更新数据集的参数
  * @param params.name - Required. Dataset name, maximum length of 100 characters. | 必选 数据集名称，最大长度为 100 个字符。
  * @param params.file_id - Optional. Dataset icon, should pass the file_id obtained from the file upload interface. | 可选 数据集图标，应传递从文件上传接口获取的 file_id。
  * @param params.description - Optional. Dataset description. | 可选 数据集描述。
  */
  async update(dataset_id, params, options) {
    const apiUrl = `/v1/datasets/${dataset_id}`;
    await this._client.put(apiUrl, params, false, options);
  }
  /**
  * Deletes a dataset | 删除数据集
  * @docs en: https://www.coze.com/docs/developer_guides/delete_dataset?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/delete_dataset?_lang=zh
  * @param dataset_id - Required. The ID of the dataset to delete | 必选 数据集 ID
  */
  async delete(dataset_id, options) {
    const apiUrl = `/v1/datasets/${dataset_id}`;
    await this._client.delete(apiUrl, false, options);
  }
  /**
  * Views the progress of dataset upload | 查看数据集上传进度
  * @docs en: https://www.coze.com/docs/developer_guides/get_dataset_progress?_lang=en
  * @docs zh: https://www.coze.cn/docs/developer_guides/get_dataset_progress?_lang=zh
  * @param dataset_id - Required. The ID of the dataset to process | 必选 数据集 ID
  * @param params - Required. The parameters for processing the dataset | 必选 处理数据集的参数
  * @param params.dataset_ids - Required. List of dataset IDs | 必选 数据集 ID 列表
  */
  async process(dataset_id, params, options) {
    const apiUrl = `/v1/datasets/${dataset_id}/process`;
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
  constructor(...args) {
    super(...args), this.documents = new documents_Documents(this._client), this.images = new Images(this._client);
  }
};
var Voices = class extends APIResource {
  /**
  * @description Clone a voice | 音色克隆
  * @param params
  * @param params.voice_name - Required. Voice name, cannot be empty and must be longer than 6 characters
  * | 复刻的音色名称，不能为空，长度大于 6
  * @param params.file - Required. Audio file | 音频文件
  * @param params.audio_format - Required. Only supports "wav", "mp3", "ogg", "m4a", "aac", "pcm" formats
  * | 只支持 "wav", "mp3", "ogg", "m4a", "aac", "pcm" 格式
  * @param params.language - Optional. Only supports "zh", "en" "ja" "es" "id" "pt" languages
  * | 只支持 "zh", "en" "ja" "es" "id" "pt" 语种
  * @param params.voice_id - Optional. If provided, will train on existing voice and override previous training
  * | 传入的话就会在原有的音色上去训练，覆盖前面训练好的音色
  * @param params.preview_text - Optional. If provided, will generate preview audio based on this text, otherwise uses default text
  * | 如果传入会基于该文本生成预览音频，否则使用默认的文本
  * @param params.text - Optional. Users can read this text, service will compare audio with text. Returns error if difference is too large
  * | 可以让用户按照该文本念诵，服务会对比音频与该文本的差异。若差异过大会返回错误
  * @param params.space_id - Optional.  The space id of the voice. | 空间ID
  * @param params.description- Optional. The description of the voice. | 音色描述
  * @param options - Request options
  * @returns Clone voice data
  */
  async clone(params, options) {
    const apiUrl = "/v1/audio/voices/clone";
    const response = await this._client.post(apiUrl, (0, toFormData2)(params), false, options);
    return response.data;
  }
  /**
  * @description List voices | 获取音色列表
  * @param params
  * @param params.filter_system_voice - Optional. Whether to filter system voices, default is false
  * | 是否过滤系统音色, 默认不过滤
  * @param params.page_num - Optional. Starts from 1 by default, value must be > 0
  * | 不传默认从 1 开始，传值需要 > 0
  * @param params.page_size - Optional. Default is 100, value must be (0, 100]
  * | 不传默认 100，传值需要 (0, 100]
  * @param params.model_type - Optional. The type of the voice model, if not filled, all will be returned.
  * @param options - Request options
  * @returns List voices data
  */
  async list(params, options) {
    const apiUrl = "/v1/audio/voices";
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
};
var Transcriptions = class extends APIResource {
  /**
  * ASR voice to text | ASR 语音转文本
  * @param params - Required The parameters for file upload | 上传文件所需的参数
  * @param params.file - Required The audio file to be uploaded. | 需要上传的音频文件。
  */
  async create(params, options) {
    const apiUrl = "/v1/audio/transcriptions";
    const response = await this._client.post(apiUrl, (0, toFormData2)(params), false, options);
    return response.data;
  }
};
var Speech = class extends APIResource {
  /**
  * @description Speech synthesis | 语音合成
  * @param params
  * @param params.input - Required. Text to generate audio | 要为其生成音频的文本
  * @param params.voice_id - Required. Voice ID | 生成音频的音色 ID
  * @param params.response_format - Optional. Audio encoding format,
  * supports "wav", "pcm", "ogg", "opus", "mp3", default is "mp3"
  * | 音频编码格式，支持 "wav", "pcm", "ogg", "opus", "mp3"，默认是 "mp3"
  * @param options - Request options
  * @returns Speech synthesis data
  */
  async create(params, options) {
    const apiUrl = "/v1/audio/speech";
    const response = await this._client.post(apiUrl, {
      ...params,
      sample_rate: params.sample_rate || 24e3
    }, false, mergeConfig3(options, {
      responseType: "arraybuffer"
    }));
    return response;
  }
};
var Rooms = class extends APIResource {
  async create(params, options) {
    const apiUrl = "/v1/audio/rooms";
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
};
var rooms_RoomMode = function(RoomMode) {
  RoomMode["Default"] = "default";
  RoomMode["S2S"] = "s2s";
  RoomMode["Podcast"] = "podcast";
  RoomMode["Translate"] = "translate";
  return RoomMode;
}({});
var rooms_CreateRoomTurnDetectionType = function(CreateRoomTurnDetectionType) {
  CreateRoomTurnDetectionType["ServerVad"] = "server_vad";
  CreateRoomTurnDetectionType["ClientVad"] = "client_vad";
  CreateRoomTurnDetectionType["ClientInterrupt"] = "client_interrupt";
  return CreateRoomTurnDetectionType;
}({});
var VoiceprintFeature = class extends APIResource {
  /**
  * Create voiceprint feature
  */
  async create(groupId, params, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}/features`;
    const response = await this._client.post(apiUrl, (0, toFormData2)(params), false, options);
    return response.data;
  }
  /**
  * Update voiceprint feature
  */
  // eslint-disable-next-line max-params
  async update(groupId, featureId, params, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}/features/${featureId}`;
    const response = await this._client.put(apiUrl, (0, toFormData2)(params), false, options);
    return response.data;
  }
  /**
  * Delete voiceprint feature
  */
  async delete(groupId, featureId, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}/features/${featureId}`;
    const response = await this._client.delete(apiUrl, false, options);
    return response.data;
  }
  /**
  * Get voiceprint feature list
  */
  async list(groupId, params, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}/features`;
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Speaker identification
  */
  async speakerIdentify(groupId, params, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}/speaker_identify`;
    const response = await this._client.post(apiUrl, (0, toFormData2)(params), false, options);
    return response.data;
  }
};
var VoiceprintGroups = class extends APIResource {
  /**
  * Create voiceprint group
  */
  async create(params, options) {
    const apiUrl = "/v1/audio/voiceprint_groups";
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Get voiceprint group list
  */
  async list(params, options) {
    const apiUrl = "/v1/audio/voiceprint_groups";
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Update voiceprint group
  */
  async update(groupId, params, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}`;
    const response = await this._client.put(apiUrl, params, false, options);
    return response.data;
  }
  /**
  * Delete voiceprint group
  */
  async delete(groupId, options) {
    const apiUrl = `/v1/audio/voiceprint_groups/${groupId}`;
    const response = await this._client.delete(apiUrl, false, options);
    return response.data;
  }
  constructor(...args) {
    super(...args), this.features = new VoiceprintFeature(this._client);
  }
};
var Live = class extends APIResource {
  /**
  * 拉流 获取收听者信息
  */
  async retrieve(liveId, options) {
    const apiUrl = `/v1/audio/live/${liveId}`;
    const response = await this._client.get(apiUrl, void 0, false, options);
    return response.data;
  }
};
var live_LiveType = function(LiveType) {
  LiveType["Origin"] = "origin";
  LiveType["Translation"] = "translation";
  return LiveType;
}({});
var Audio = class extends APIResource {
  constructor(...args) {
    super(...args), this.rooms = new Rooms(this._client), this.live = new Live(this._client), this.voices = new Voices(this._client), this.speech = new Speech(this._client), this.transcriptions = new Transcriptions(this._client), this.voiceprintGroups = new VoiceprintGroups(this._client);
  }
};
var Templates = class extends APIResource {
  /**
  * Duplicate a template. | 复制一个模板。
  * @param templateId - Required. The ID of the template to duplicate. | 要复制的模板的 ID。
  * @param params - Optional. The parameters for the duplicate operation. | 可选参数，用于复制操作。
  * @param params.workspace_id - Required. The ID of the workspace to duplicate the template into. | 要复制到的目标工作空间的 ID。
  * @param params.name - Optional. The name of the new template. | 新模板的名称。
  * @returns TemplateDuplicateRes | 复制模板结果
  */
  async duplicate(templateId, params, options) {
    const apiUrl = `/v1/templates/${templateId}/duplicate`;
    const response = await this._client.post(apiUrl, params, false, options);
    return response.data;
  }
};
var templates_TemplateEntityType = function(TemplateEntityType) {
  TemplateEntityType["AGENT"] = "agent";
  return TemplateEntityType;
}({});
var chat_Chat = class extends APIResource {
  async create(req, options) {
    const apiUrl = buildWebsocketUrl("/v1/chat", req);
    return await this._client.makeWebsocket(apiUrl, options);
  }
};
var transcriptions_Transcriptions = class extends APIResource {
  async create(req, options) {
    const apiUrl = buildWebsocketUrl("/v1/audio/transcriptions", req);
    return await this._client.makeWebsocket(apiUrl, options);
  }
};
var speech_Speech = class extends APIResource {
  async create(req, options) {
    const apiUrl = buildWebsocketUrl("/v1/audio/speech", req);
    return await this._client.makeWebsocket(apiUrl, options);
  }
};
var SimultInterpretation = class extends APIResource {
  async create(options) {
    const apiUrl = "/v1/audio/simult_interpretation";
    return await this._client.makeWebsocket(apiUrl, options);
  }
};
var audio_Audio = class extends APIResource {
  constructor(...args) {
    super(...args), this.speech = new speech_Speech(this._client), this.transcriptions = new transcriptions_Transcriptions(this._client), this.simultInterpretation = new SimultInterpretation(this._client);
  }
};
var types_WebsocketsEventType = function(WebsocketsEventType) {
  WebsocketsEventType["CLIENT_ERROR"] = "client_error";
  WebsocketsEventType["CLOSED"] = "closed";
  WebsocketsEventType["ALL"] = "all";
  WebsocketsEventType["ERROR"] = "error";
  WebsocketsEventType["INPUT_TEXT_BUFFER_APPEND"] = "input_text_buffer.append";
  WebsocketsEventType["INPUT_TEXT_BUFFER_COMPLETE"] = "input_text_buffer.complete";
  WebsocketsEventType["SPEECH_UPDATE"] = "speech.update";
  WebsocketsEventType["SPEECH_UPDATED"] = "speech.updated";
  WebsocketsEventType["SPEECH_CREATED"] = "speech.created";
  WebsocketsEventType["INPUT_TEXT_BUFFER_COMPLETED"] = "input_text_buffer.completed";
  WebsocketsEventType["SPEECH_AUDIO_UPDATE"] = "speech.audio.update";
  WebsocketsEventType["SPEECH_AUDIO_COMPLETED"] = "speech.audio.completed";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_APPEND"] = "input_audio_buffer.append";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_COMPLETE"] = "input_audio_buffer.complete";
  WebsocketsEventType["TRANSCRIPTIONS_UPDATE"] = "transcriptions.update";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_CLEAR"] = "input_audio_buffer.clear";
  WebsocketsEventType["TRANSCRIPTIONS_CREATED"] = "transcriptions.created";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_COMPLETED"] = "input_audio_buffer.completed";
  WebsocketsEventType["TRANSCRIPTIONS_MESSAGE_UPDATE"] = "transcriptions.message.update";
  WebsocketsEventType["TRANSCRIPTIONS_MESSAGE_COMPLETED"] = "transcriptions.message.completed";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_CLEARED"] = "input_audio_buffer.cleared";
  WebsocketsEventType["TRANSCRIPTIONS_UPDATED"] = "transcriptions.updated";
  WebsocketsEventType["CHAT_UPDATE"] = "chat.update";
  WebsocketsEventType["CONVERSATION_CHAT_SUBMIT_TOOL_OUTPUTS"] = "conversation.chat.submit_tool_outputs";
  WebsocketsEventType["CHAT_CREATED"] = "chat.created";
  WebsocketsEventType["CHAT_UPDATED"] = "chat.updated";
  WebsocketsEventType["CONVERSATION_CHAT_CREATED"] = "conversation.chat.created";
  WebsocketsEventType["CONVERSATION_MESSAGE_CREATE"] = "conversation.message.create";
  WebsocketsEventType["CONVERSATION_CLEAR"] = "conversation.clear";
  WebsocketsEventType["CONVERSATION_CHAT_IN_PROGRESS"] = "conversation.chat.in_progress";
  WebsocketsEventType["CONVERSATION_MESSAGE_DELTA"] = "conversation.message.delta";
  WebsocketsEventType["CONVERSATION_CHAT_REQUIRES_ACTION"] = "conversation.chat.requires_action";
  WebsocketsEventType["CONVERSATION_MESSAGE_COMPLETED"] = "conversation.message.completed";
  WebsocketsEventType["CONVERSATION_AUDIO_DELTA"] = "conversation.audio.delta";
  WebsocketsEventType["CONVERSATION_AUDIO_COMPLETED"] = "conversation.audio.completed";
  WebsocketsEventType["CONVERSATION_CHAT_COMPLETED"] = "conversation.chat.completed";
  WebsocketsEventType["CONVERSATION_CHAT_FAILED"] = "conversation.chat.failed";
  WebsocketsEventType["CONVERSATION_CLEARED"] = "conversation.cleared";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_SPEECH_STARTED"] = "input_audio_buffer.speech_started";
  WebsocketsEventType["INPUT_AUDIO_BUFFER_SPEECH_STOPPED"] = "input_audio_buffer.speech_stopped";
  WebsocketsEventType["CONVERSATION_CHAT_CANCEL"] = "conversation.chat.cancel";
  WebsocketsEventType["CONVERSATION_CHAT_CANCELED"] = "conversation.chat.canceled";
  WebsocketsEventType["CONVERSATION_AUDIO_TRANSCRIPT_UPDATE"] = "conversation.audio_transcript.update";
  WebsocketsEventType["CONVERSATION_AUDIO_TRANSCRIPT_COMPLETED"] = "conversation.audio_transcript.completed";
  WebsocketsEventType["CONVERSATION_AUDIO_SENTENCE_START"] = "conversation.audio.sentence_start";
  WebsocketsEventType["DUMP_AUDIO"] = "dump.audio";
  WebsocketsEventType["SIMULT_INTERPRETATION_UPDATE"] = "simult_interpretation.update";
  WebsocketsEventType["SIMULT_INTERPRETATION_CREATED"] = "simult_interpretation.created";
  WebsocketsEventType["SIMULT_INTERPRETATION_UPDATED"] = "simult_interpretation.updated";
  WebsocketsEventType["SIMULT_INTERPRETATION_AUDIO_DELTA"] = "simult_interpretation.audio.delta";
  WebsocketsEventType["SIMULT_INTERPRETATION_TRANSCRIPTION_DELTA"] = "simult_interpretation.transcription.delta";
  WebsocketsEventType["SIMULT_INTERPRETATION_TRANSLATION_DELTA"] = "simult_interpretation.translation.delta";
  WebsocketsEventType["SIMULT_INTERPRETATION_MESSAGE_COMPLETED"] = "simult_interpretation.message.completed";
  return WebsocketsEventType;
}({});
var Websockets = class extends APIResource {
  constructor(...args) {
    super(...args), this.audio = new audio_Audio(this._client), this.chat = new chat_Chat(this._client);
  }
};
var Variables = class extends APIResource {
  /**
  * Set values for user variables
  * @docs en: https://www.coze.com/open/docs/developer_guides/update_variable
  * @docs zh: https://www.coze.cn/open/docs/developer_guides/update_variable
  * @param params - The parameters for the variable update
  * @param options - Optional request options
  */
  async update(params, options) {
    const apiUrl = "/v1/variables";
    await this._client.put(apiUrl, params, false, options);
  }
  /**
  * Get the values of user variables
  * @docs en: https://www.coze.com/open/docs/developer_guides/read_variable
  * @docs zh: https://www.coze.cn/open/docs/developer_guides/read_variable
  * @param params - The parameters for the variable retrieval
  * @param options - Optional request options
  */
  async retrieve(params, options) {
    const apiUrl = "/v1/variables";
    const response = await this._client.get(apiUrl, params, false, options);
    return response.data;
  }
};
var Users = class extends APIResource {
  /**
  * Get information about the authenticated user.
  * @param options - Optional request configuration options.
  * @returns Information about the authenticated user.
  */
  async me(options) {
    const apiUrl = "/v1/users/me";
    const result = await this._client.get(apiUrl, void 0, false, options);
    return result.data;
  }
};
var WebSocketAPI = class {
  // Standard WebSocket properties
  get readyState() {
    return this.rws.readyState;
  }
  // Standard WebSocket methods
  send(data) {
    return this.rws.send(JSON.stringify(data));
  }
  close(code, reason) {
    return this.rws.close(code, reason);
  }
  reconnect(code, reason) {
    return this.rws.reconnect(code, reason);
  }
  // Event listener methods
  addEventListener(type, listener) {
    this.rws.addEventListener(type, listener);
  }
  removeEventListener(type, listener) {
    this.rws.removeEventListener(type, listener);
  }
  constructor(url, options = {}) {
    this.onmessage = null;
    this.onopen = null;
    this.onclose = null;
    this.onerror = null;
    const separator = url.includes("?") ? "&" : "?";
    const { authorization } = options.headers || {};
    let WebSocketImpl;
    if (isUniApp()) {
      const factory2 = "function" == typeof getMiniAppWebSocketFactory ? getMiniAppWebSocketFactory() : null;
      WebSocketImpl = factory2 ? factory2.getWebSocketImplementation() : window.WebSocket;
    } else
      WebSocketImpl = isBrowser() ? window.WebSocket : class extends __WEBPACK_EXTERNAL_MODULE_ws__["default"] {
        constructor(url2, protocols) {
          super(url2, protocols, {
            headers: options.headers
          });
        }
      };
    this.rws = new reconnecting_websocket_mjs_default(`${url}${separator}authorization=${authorization}`, [], {
      WebSocket: WebSocketImpl,
      ...options
    });
    this.rws.addEventListener("message", (event) => {
      try {
        var _this_onmessage, _this;
        const data = JSON.parse(event.data);
        null === (_this_onmessage = (_this = this).onmessage) || void 0 === _this_onmessage || _this_onmessage.call(_this, data, event);
      } catch (error) {
        console.error("WebSocketAPI onmessage error", error);
      }
    });
    this.rws.addEventListener("open", (event) => {
      var _this_onopen, _this;
      null === (_this_onopen = (_this = this).onopen) || void 0 === _this_onopen || _this_onopen.call(_this, event);
    });
    this.rws.addEventListener("close", (event) => {
      var _this_onclose, _this;
      null === (_this_onclose = (_this = this).onclose) || void 0 === _this_onclose || _this_onclose.call(_this, event);
    });
    this.rws.addEventListener("error", (event) => {
      var _event_target__req_res, _event_target__req, _event_target, _event_target__req_res1, _event_target__req1, _event_target1, _this_onerror, _this;
      const { readyState } = this.rws;
      if (3 === readyState) return;
      const statusCode = null === (_event_target = event.target) || void 0 === _event_target ? void 0 : null === (_event_target__req = _event_target._req) || void 0 === _event_target__req ? void 0 : null === (_event_target__req_res = _event_target__req.res) || void 0 === _event_target__req_res ? void 0 : _event_target__req_res.statusCode;
      const rawHeaders = (null === (_event_target1 = event.target) || void 0 === _event_target1 ? void 0 : null === (_event_target__req1 = _event_target1._req) || void 0 === _event_target__req1 ? void 0 : null === (_event_target__req_res1 = _event_target__req1.res) || void 0 === _event_target__req_res1 ? void 0 : _event_target__req_res1.rawHeaders) || [];
      const logidIndex = rawHeaders.findIndex((header) => "X-Tt-Logid" === header);
      const logid = -1 !== logidIndex ? rawHeaders[logidIndex + 1] : void 0;
      const error = {
        id: "0",
        event_type: types_WebsocketsEventType.ERROR,
        data: {
          code: -1,
          msg: "WebSocket error"
        },
        detail: {
          logid
        }
      };
      if (401 === statusCode) {
        error.data.code = 401;
        error.data.msg = "Unauthorized";
      } else if (403 === statusCode) {
        error.data.code = 403;
        error.data.msg = "Forbidden";
      } else {
        error.data.code = 500;
        var _event_error;
        error.data.msg = String(null !== (_event_error = null == event ? void 0 : event.error) && void 0 !== _event_error ? _event_error : "") || "WebSocket error";
      }
      null === (_this_onerror = (_this = this).onerror) || void 0 === _this_onerror || _this_onerror.call(_this, error, event);
    });
  }
};
var package_namespaceObject = JSON.parse('{"name":"@coze/api","version":"1.3.7","description":"Official Coze Node.js SDK for seamless AI integration into your applications | 扣子官方 Node.js SDK，助您轻松集成 AI 能力到应用中","keywords":["coze","ai","nodejs","sdk","chatbot","typescript"],"homepage":"https://github.com/coze-dev/coze-js/tree/main/packages/coze-js","bugs":{"url":"https://github.com/coze-dev/coze-js/issues"},"repository":{"type":"git","url":"https://github.com/coze-dev/coze-js.git","directory":"packages/coze-js"},"license":"MIT","author":"Leeight <leeight@gmail.com>","exports":{".":"./src/index.ts","./ws-tools":"./src/ws-tools/index.ts"},"main":"src/index.ts","unpkg":"dist/umd/index.js","module":"src/index.ts","browser":{"crypto":false,"os":false,"jsonwebtoken":false,"node-fetch":false,"ws":false},"typesVersions":{"*":{".":["dist/types/index.d.ts"],"ws-tools":["dist/types/ws-tools/ws-tools/index.d.ts"]}},"files":["dist","LICENSE","README.md","README.zh-CN.md"],"scripts":{"build":"rslib build","format":"prettier --write .","lint":"eslint ./ --cache --quiet","start":"rslib build -w","test":"vitest","test:cov":"vitest --coverage --run"},"dependencies":{"agora-extension-ai-denoiser":"^1.0.0","agora-rtc-sdk-ng":"4.23.2-1","agora-rte-extension":"^1.2.4","jsonwebtoken":"^9.0.2","node-fetch":"^2.x","opus-encdec":"^0.1.1","reconnecting-websocket":"^4.4.0","uuid":"^10.0.0","ws":"^8.11.0"},"devDependencies":{"@coze-infra/eslint-config":"workspace:*","@coze-infra/ts-config":"workspace:*","@coze-infra/vitest-config":"workspace:*","@rslib/core":"0.0.18","@swc/core":"^1.3.14","@types/jsonwebtoken":"^9.0.0","@types/node":"^20","@types/node-fetch":"^2.x","@types/uuid":"^9.0.1","@types/whatwg-fetch":"^0.0.33","@types/ws":"^8.5.1","@vitest/coverage-v8":"~2.1.9","axios":"^1.7.7","typescript":"^5.5.3","vitest":"~2.1.9"},"peerDependencies":{"axios":"^1.7.1"},"publishConfig":{"access":"public","registry":"https://registry.npmjs.org"},"cozePublishConfig":{"exports":{".":{"require":"./dist/cjs/index.js","import":"./dist/esm/index.mjs","types":"./dist/types/index.d.ts"},"./ws-tools":{"require":"./dist/cjs/ws-tools/index.js","import":"./dist/esm/ws-tools/index.mjs","types":"./dist/types/ws-tools/ws-tools/index.d.ts"}},"main":"dist/cjs/index.js","module":"dist/esm/index.mjs","types":"dist/types/index.d.ts"},"overrides":{"agora-extension-ai-denoiser":{"agora-rtc-sdk-ng":"$agora-rtc-sdk-ng"}}}');
var { version: version_version } = package_namespaceObject;
var getEnv = () => {
  const nodeVersion = process.version.slice(1);
  const { platform } = process;
  let osName = platform.toLowerCase();
  let osVersion = __WEBPACK_EXTERNAL_MODULE_os__["default"].release();
  if ("darwin" === platform) {
    osName = "macos";
    try {
      const darwinVersion = __WEBPACK_EXTERNAL_MODULE_os__["default"].release().split(".");
      if (darwinVersion.length >= 2) {
        const majorVersion = parseInt(darwinVersion[0], 10);
        if (!isNaN(majorVersion) && majorVersion >= 9) {
          const macVersion = majorVersion - 9;
          osVersion = `10.${macVersion}.${darwinVersion[1]}`;
        }
      }
    } catch (error) {
    }
  } else if ("win32" === platform) {
    osName = "windows";
    osVersion = __WEBPACK_EXTERNAL_MODULE_os__["default"].release();
  } else if ("linux" === platform) {
    osName = "linux";
    osVersion = __WEBPACK_EXTERNAL_MODULE_os__["default"].release();
  }
  return {
    osName,
    osVersion,
    nodeVersion
  };
};
var getUserAgent = () => {
  const { nodeVersion, osName, osVersion } = getEnv();
  return `coze-js/${version_version} node/${nodeVersion} ${osName}/${osVersion}`.toLowerCase();
};
var getNodeClientUserAgent = () => {
  const { osVersion, nodeVersion, osName } = getEnv();
  const ua = {
    version: version_version,
    lang: "node",
    lang_version: nodeVersion,
    os_name: osName,
    os_version: osVersion
  };
  return JSON.stringify(ua);
};
var getBrowserClientUserAgent = () => {
  const browserInfo = {
    name: "unknown",
    version: "unknown"
  };
  const osInfo = {
    name: "unknown",
    version: "unknown"
  };
  const { userAgent } = navigator;
  if (userAgent) {
    if (userAgent.indexOf("Windows") > -1) {
      var _userAgent_match;
      osInfo.name = "windows";
      const windowsVersion = (null === (_userAgent_match = userAgent.match(/Windows NT ([0-9.]+)/)) || void 0 === _userAgent_match ? void 0 : _userAgent_match[1]) || "unknown";
      osInfo.version = windowsVersion;
    } else if (userAgent.indexOf("Mac OS X") > -1) {
      var _userAgent_match1;
      osInfo.name = "macos";
      osInfo.version = ((null === (_userAgent_match1 = userAgent.match(/Mac OS X ([0-9_]+)/)) || void 0 === _userAgent_match1 ? void 0 : _userAgent_match1[1]) || "unknown").replace(/_/g, ".");
    } else if (userAgent.indexOf("Linux") > -1) {
      var _userAgent_match2;
      osInfo.name = "linux";
      osInfo.version = (null === (_userAgent_match2 = userAgent.match(/Linux ([0-9.]+)/)) || void 0 === _userAgent_match2 ? void 0 : _userAgent_match2[1]) || "unknown";
    }
    if (userAgent.indexOf("Chrome") > -1) {
      var _userAgent_match3;
      browserInfo.name = "chrome";
      browserInfo.version = (null === (_userAgent_match3 = userAgent.match(/Chrome\/([0-9.]+)/)) || void 0 === _userAgent_match3 ? void 0 : _userAgent_match3[1]) || "unknown";
    } else if (userAgent.indexOf("Firefox") > -1) {
      var _userAgent_match4;
      browserInfo.name = "firefox";
      browserInfo.version = (null === (_userAgent_match4 = userAgent.match(/Firefox\/([0-9.]+)/)) || void 0 === _userAgent_match4 ? void 0 : _userAgent_match4[1]) || "unknown";
    } else if (userAgent.indexOf("Safari") > -1) {
      var _userAgent_match5;
      browserInfo.name = "safari";
      browserInfo.version = (null === (_userAgent_match5 = userAgent.match(/Version\/([0-9.]+)/)) || void 0 === _userAgent_match5 ? void 0 : _userAgent_match5[1]) || "unknown";
    }
  }
  const ua = {
    version: version_version,
    browser: browserInfo.name,
    browser_version: browserInfo.version,
    os_name: osInfo.name,
    os_version: osInfo.version
  };
  return JSON.stringify(ua);
};
var getUniAppClientUserAgent = () => {
  if (!(null == uni ? void 0 : uni.getSystemInfoSync)) return JSON.stringify({});
  const systemInfo = uni.getSystemInfoSync();
  const platformInfo = {
    name: "unknown",
    version: "unknown"
  };
  const osInfo = {
    name: "unknown",
    version: "unknown"
  };
  if ("android" === systemInfo.platform) {
    osInfo.name = "android";
    osInfo.version = systemInfo.system || "unknown";
  } else if ("ios" === systemInfo.platform) {
    osInfo.name = "ios";
    osInfo.version = systemInfo.system || "unknown";
  } else if ("windows" === systemInfo.platform) {
    osInfo.name = "windows";
    osInfo.version = systemInfo.system || "unknown";
  } else if ("mac" === systemInfo.platform) {
    osInfo.name = "macos";
    osInfo.version = systemInfo.system || "unknown";
  } else {
    osInfo.name = systemInfo.platform;
    osInfo.version = systemInfo.system || "unknown";
  }
  if (systemInfo.AppPlatform) {
    platformInfo.name = systemInfo.AppPlatform.toLowerCase();
    platformInfo.version = systemInfo.appVersion || "unknown";
  } else if (systemInfo.uniPlatform) {
    platformInfo.name = systemInfo.uniPlatform;
    platformInfo.version = systemInfo.SDKVersion || "unknown";
  } else {
    const { appName, appVersion } = systemInfo;
    if (appName) {
      platformInfo.name = appName.toLowerCase();
      platformInfo.version = appVersion || "unknown";
    }
  }
  const ua = {
    version: version_version,
    framework: "uniapp",
    platform: platformInfo.name,
    platform_version: platformInfo.version,
    os_name: osInfo.name,
    os_version: osInfo.version,
    screen_width: systemInfo.screenWidth,
    screen_height: systemInfo.screenHeight,
    device_model: systemInfo.model,
    device_brand: systemInfo.brand
  };
  return JSON.stringify(ua);
};
var COZE_COM_BASE_URL = "https://api.coze.com";
var COZE_CN_BASE_URL = "https://api.coze.cn";
var COZE_COM_BASE_WS_URL = "wss://ws.coze.com";
var COZE_CN_BASE_WS_URL = "wss://ws.coze.cn";
var POLL_INTERVAL = 5e3;
var MAX_POLL_INTERVAL = 3e4;
var handleError = (error) => {
  if (!error.isAxiosError && (!error.code || !error.message)) return APIError.generate(500, void 0, `Unexpected error: ${error.message}`, void 0);
  if ("ECONNABORTED" === error.code && error.message.includes("timeout") || "ETIMEDOUT" === error.code) {
    var _error_response;
    return new TimeoutError(408, void 0, `Request timed out: ${error.message}`, null === (_error_response = error.response) || void 0 === _error_response ? void 0 : _error_response.headers);
  }
  if ("ERR_CANCELED" === error.code) return new APIUserAbortError(error.message);
  else {
    var _error_response1, _error_response2, _error_response3;
    return APIError.generate((null === (_error_response1 = error.response) || void 0 === _error_response1 ? void 0 : _error_response1.status) || 500, null === (_error_response2 = error.response) || void 0 === _error_response2 ? void 0 : _error_response2.data, error.message, null === (_error_response3 = error.response) || void 0 === _error_response3 ? void 0 : _error_response3.headers);
  }
};
var adapterFetch = async (options) => {
  const response = await (0, __WEBPACK_EXTERNAL_MODULE_node_fetch__["default"])(options.url, {
    body: options.data,
    ...options
  });
  return {
    data: response.body,
    ...response
  };
};
var isSupportNativeFetch = () => {
  if (isBrowser() || isBrowserExtension() || isUniApp()) return true;
  const version = process.version.slice(1);
  return compareVersions(version, "18.0.0") >= 0;
};
async function fetchAPI(url) {
  let options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
  const axiosInstance = options.axiosInstance || axios_default;
  if (options.isStreaming && isAxiosStatic(axiosInstance)) {
    const axiosVersion = axiosInstance.VERSION || axios_default.VERSION;
    if (!axiosVersion || compareVersions(axiosVersion, "1.7.1") < 0) throw new CozeError("Streaming requests require axios version 1.7.1 or higher. Please upgrade your axios version.");
  }
  const checkError = () => {
    if (url.startsWith(COZE_COM_BASE_URL)) console.warn(`
鉴权失败，如果您是国内用户，请将 baseURL 设置为 ${COZE_CN_BASE_URL} 示例：
new CozeAPI({
  // ...
  baseURL: COZE_CN_BASE_URL
})`);
  };
  const response = await axiosInstance({
    url,
    responseType: options.isStreaming ? "stream" : "json",
    adapter: options.isStreaming ? isSupportNativeFetch() ? "fetch" : adapterFetch : void 0,
    ...options
  }).catch((error) => {
    if ((null == error ? void 0 : error.status) === 401) checkError();
    throw handleError(error);
  });
  return {
    async *stream() {
      try {
        const stream = response.data;
        const reader = stream[Symbol.asyncIterator] ? stream[Symbol.asyncIterator]() : stream.getReader();
        const decoder = new TextDecoder();
        const fieldValues = {};
        let buffer = "";
        while (true) {
          const { done, value } = await (reader.next ? reader.next() : reader.read());
          if (done) {
            if (buffer) {
              fieldValues.event = "error";
              fieldValues.data = buffer;
              try {
                const error = JSON.parse(buffer);
                if ((null == error ? void 0 : error.code) === 4101) checkError();
              } catch (e) {
              }
              yield fieldValues;
            }
            break;
          }
          buffer += decoder.decode(value, {
            stream: true
          });
          const lines = buffer.split("\n");
          for (let i = 0; i < lines.length - 1; i++) {
            const line = lines[i];
            const index = line.indexOf(":");
            if (-1 !== index) {
              const field = line.substring(0, index).trim();
              const content = line.substring(index + 1).trim();
              fieldValues[field] = content;
              if ("data" === field) yield fieldValues;
            }
          }
          buffer = lines[lines.length - 1];
        }
      } catch (error) {
        handleError(error);
      }
    },
    json: () => response.data,
    response
  };
}
function compareVersions(v1, v2) {
  const v1Parts = v1.split(".").map(Number);
  const v2Parts = v2.split(".").map(Number);
  for (let i = 0; i < 3; i++) {
    const part1 = v1Parts[i] || 0;
    const part2 = v2Parts[i] || 0;
    if (part1 > part2) return 1;
    if (part1 < part2) return -1;
  }
  return 0;
}
function isAxiosStatic(instance) {
  return !!(null == instance ? void 0 : instance.Axios);
}
var APIClient = class {
  async getToken() {
    if ("function" == typeof this.token) return await this.token();
    return this.token;
  }
  async buildOptions(method, body, options) {
    const token = await this.getToken();
    const headers = {
      authorization: `Bearer ${token}`
    };
    if (isUniApp()) headers["X-Coze-Client-User-Agent"] = getUniAppClientUserAgent();
    else if (isBrowser() || isBrowserExtension()) headers["X-Coze-Client-User-Agent"] = getBrowserClientUserAgent();
    else {
      headers["User-Agent"] = getUserAgent();
      headers["X-Coze-Client-User-Agent"] = getNodeClientUserAgent();
    }
    const config = mergeConfig3(this.axiosOptions, options, {
      headers
    }, {
      headers: this.headers || {}
    });
    config.method = method;
    config.data = body;
    return config;
  }
  async buildWebsocketOptions(options) {
    const token = await this.getToken();
    const headers = {
      authorization: `Bearer ${token}`
    };
    if (isUniApp()) headers["X-Coze-Client-User-Agent"] = getUniAppClientUserAgent();
    else if (isBrowser()) headers["X-Coze-Client-User-Agent"] = getBrowserClientUserAgent();
    else {
      headers["User-Agent"] = getUserAgent();
      headers["X-Coze-Client-User-Agent"] = getNodeClientUserAgent();
    }
    var _this__config_debug;
    const config = mergeConfig3({
      debug: null !== (_this__config_debug = this._config.debug) && void 0 !== _this__config_debug && _this__config_debug
    }, this._config.websocketOptions, options, {
      headers
    }, {
      headers: this.headers || {}
    });
    return config;
  }
  async makeRequest(apiUrl, method, body, isStream2, options) {
    const fullUrl = `${this.baseURL}${apiUrl}`;
    try {
      const fetchOptions = await this.buildOptions(method, body, options);
      fetchOptions.isStreaming = isStream2;
      fetchOptions.axiosInstance = this.axiosInstance;
      this.debugLog(null == options ? void 0 : options.debug, `--- request url: ${fullUrl}`);
      this.debugLog(null == options ? void 0 : options.debug, "--- request options:", fetchOptions);
      const { response, stream, json } = await fetchAPI(fullUrl, fetchOptions);
      this.debugLog(null == options ? void 0 : options.debug, `--- response status: ${response.status}`);
      this.debugLog(null == options ? void 0 : options.debug, "--- response headers: ", response.headers);
      var _response_headers;
      const contentType = (null !== (_response_headers = response.headers) && void 0 !== _response_headers ? _response_headers : response.header)["content-type"];
      if (isStream2) {
        if (contentType && contentType.includes("application/json")) {
          const result = await json();
          const { code, msg } = result;
          if (0 !== code && void 0 !== code) throw APIError.generate(response.status, result, msg, response.headers);
        }
        return stream();
      }
      if (!(contentType && contentType.includes("application/json"))) return await response.data;
      {
        const result = await json();
        const { code, msg } = result;
        if (0 !== code && void 0 !== code) throw APIError.generate(response.status, result, msg, response.headers);
        return result;
      }
    } catch (error) {
      var _this__config;
      const onApiError = (null == options ? void 0 : options.onApiError) || (null === (_this__config = this._config) || void 0 === _this__config ? void 0 : _this__config.onApiError);
      if (onApiError) onApiError(error);
      throw error;
    }
  }
  async post(apiUrl, body) {
    let isStream2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], options = arguments.length > 3 ? arguments[3] : void 0;
    return this.makeRequest(apiUrl, "POST", body, isStream2, options);
  }
  async get(apiUrl, param, isStream2, options) {
    const queryString = Object.entries(param || {}).filter((param2) => {
      let [_, value] = param2;
      return null != value;
    }).map((param2) => {
      let [key, value] = param2;
      return `${key}=${value}`;
    }).join("&");
    return this.makeRequest(queryString ? `${apiUrl}${apiUrl.includes("?") ? "&" : "?"}${queryString}` : apiUrl, "GET", void 0, isStream2, options);
  }
  async put(apiUrl, body, isStream2, options) {
    return this.makeRequest(apiUrl, "PUT", body, isStream2, options);
  }
  async delete(apiUrl, isStream2, options) {
    return this.makeRequest(apiUrl, "DELETE", void 0, isStream2, options);
  }
  async makeWebsocket(apiUrl, options) {
    const fullUrl = `${this.baseWsURL}${apiUrl}`;
    const websocketOptions = await this.buildWebsocketOptions(options);
    this.debugLog(null == options ? void 0 : options.debug, `--- websocket url: ${fullUrl}`);
    this.debugLog(null == options ? void 0 : options.debug, "--- websocket options:", websocketOptions);
    const ws = new WebSocketAPI(fullUrl, websocketOptions);
    return ws;
  }
  getConfig() {
    return this._config;
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  debugLog() {
    let forceDebug = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) msgs[_key - 1] = arguments[_key];
    if (this.debug || forceDebug) console.debug(...msgs);
  }
  constructor(config) {
    this._config = config;
    this.baseURL = config.baseURL || COZE_COM_BASE_URL;
    this.baseWsURL = config.baseWsURL || COZE_CN_BASE_WS_URL;
    this.token = config.token;
    this.axiosOptions = config.axiosOptions || {};
    this.axiosInstance = config.axiosInstance;
    this.debug = config.debug || false;
    this.allowPersonalAccessTokenInBrowser = config.allowPersonalAccessTokenInBrowser || false;
    this.headers = config.headers;
    if (isBrowser() && "function" != typeof this.token && isPersonalAccessToken(this.token) && !this.allowPersonalAccessTokenInBrowser) throw new CozeError("Browser environments do not support authentication using Personal Access Token (PAT) by default.\nas it may expose secret API keys. \n\nPlease use OAuth2.0 authentication mechanism. see:\nhttps://www.coze.com/docs/developer_guides/oauth_apps?_lang=en \n\nIf you need to force use, please set the `allowPersonalAccessTokenInBrowser` option to `true`. \n\ne.g new CozeAPI({ token, allowPersonalAccessTokenInBrowser: true });\n\n");
  }
};
APIClient.APIError = APIError;
APIClient.BadRequestError = BadRequestError;
APIClient.AuthenticationError = AuthenticationError;
APIClient.PermissionDeniedError = PermissionDeniedError;
APIClient.NotFoundError = NotFoundError;
APIClient.RateLimitError = RateLimitError;
APIClient.InternalServerError = InternalServerError;
APIClient.GatewayError = GatewayError;
APIClient.TimeoutError = TimeoutError;
APIClient.UserAbortError = APIUserAbortError;
var getCrypto = () => {
  if (isUniApp()) return {
    getRandomValues: uni.getRandomValues,
    subtle: {
      // TODO Currently not supporting uniapp, will provide support later if needed
      digest: () => {
        console.error("digest is not supported in uniapp");
        throw new Error("digest is not supported in uniapp");
      }
    }
  };
  if (isBrowser() || isBrowserExtension()) {
    if ("undefined" != typeof self && self.crypto) return self.crypto;
    if ("undefined" != typeof window && window.crypto) return window.crypto;
  }
  return {
    getRandomValues: (array) => __WEBPACK_EXTERNAL_MODULE_crypto__.randomFillSync(array),
    subtle: __WEBPACK_EXTERNAL_MODULE_crypto__.subtle
  };
};
var generateRandomString = () => {
  const array = new Uint8Array(32);
  getCrypto().getRandomValues(array);
  return Array.from(array, (byte) => byte.toString(16).padStart(2, "0")).join("");
};
var getWebAuthenticationUrl = (config) => {
  var _config_baseURL;
  const baseUrl = (null !== (_config_baseURL = config.baseURL) && void 0 !== _config_baseURL ? _config_baseURL : COZE_COM_BASE_URL).replace("https://api", "https://www");
  var _config_state;
  const params = new URLSearchParams({
    response_type: "code",
    client_id: config.clientId,
    redirect_uri: config.redirectUrl,
    state: null !== (_config_state = config.state) && void 0 !== _config_state ? _config_state : ""
  });
  if (config.workspaceId) return `${baseUrl}/api/permission/oauth2/workspace_id/${config.workspaceId}/authorize?${params.toString()}`;
  return `${baseUrl}/api/permission/oauth2/authorize?${params.toString()}`;
};
var getPKCEAuthenticationUrl = async (config) => {
  var _config_baseURL;
  const baseUrl = (null !== (_config_baseURL = config.baseURL) && void 0 !== _config_baseURL ? _config_baseURL : COZE_COM_BASE_URL).replace("https://api", "https://www");
  const crypto = getCrypto();
  const generateCodeChallenge = async (codeVerifier2) => {
    const encoder = new TextEncoder();
    const data = encoder.encode(codeVerifier2);
    const hash = await crypto.subtle.digest("SHA-256", data);
    return btoa(String.fromCharCode(...new Uint8Array(hash))).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
  };
  const codeVerifier = generateRandomString();
  const codeChallenge = await generateCodeChallenge(codeVerifier);
  var _config_state;
  const params = new URLSearchParams({
    response_type: "code",
    client_id: config.clientId,
    redirect_uri: config.redirectUrl,
    state: null !== (_config_state = config.state) && void 0 !== _config_state ? _config_state : "",
    code_challenge: codeChallenge,
    code_challenge_method: config.code_challenge_method || "S256"
  });
  if (config.workspaceId) return {
    url: `${baseUrl}/api/permission/oauth2/workspace_id/${config.workspaceId}/authorize?${params.toString()}`,
    codeVerifier
  };
  return {
    url: `${baseUrl}/api/permission/oauth2/authorize?${params.toString()}`,
    codeVerifier
  };
};
var getWebOAuthToken = async (config, options) => {
  const api = new APIClient({
    token: config.clientSecret,
    baseURL: config.baseURL
  });
  const apiUrl = "/api/permission/oauth2/token";
  const payload = {
    grant_type: "authorization_code",
    client_id: config.clientId,
    redirect_uri: config.redirectUrl,
    code: config.code
  };
  const result = await api.post(apiUrl, payload, false, options);
  return result;
};
var getPKCEOAuthToken = async (config, options) => {
  const api = new APIClient({
    token: "",
    baseURL: config.baseURL
  });
  const apiUrl = "/api/permission/oauth2/token";
  const payload = {
    grant_type: "authorization_code",
    client_id: config.clientId,
    redirect_uri: config.redirectUrl,
    code: config.code,
    code_verifier: config.codeVerifier
  };
  const result = await api.post(apiUrl, payload, false, options);
  return result;
};
var refreshOAuthToken = async (config, options) => {
  const api = new APIClient({
    token: config.clientSecret || "",
    baseURL: config.baseURL
  });
  const apiUrl = "/api/permission/oauth2/token";
  const payload = {
    grant_type: "refresh_token",
    client_id: config.clientId,
    refresh_token: config.refreshToken
  };
  const result = await api.post(apiUrl, payload, false, options);
  return result;
};
var getDeviceCode = async (config, options) => {
  if (isBrowser()) throw new Error("getDeviceCode is not supported in browser");
  const api = new APIClient({
    token: "",
    baseURL: config.baseURL
  });
  let apiUrl;
  apiUrl = config.workspaceId ? `/api/permission/oauth2/workspace_id/${config.workspaceId}/device/code` : "/api/permission/oauth2/device/code";
  const payload = {
    client_id: config.clientId
  };
  const result = await api.post(apiUrl, payload, false, options);
  return result;
};
var _getDeviceToken = async (config, options) => {
  const api = new APIClient({
    token: "",
    baseURL: config.baseURL
  });
  const apiUrl = "/api/permission/oauth2/token";
  const payload = {
    grant_type: "urn:ietf:params:oauth:grant-type:device_code",
    client_id: config.clientId,
    device_code: config.deviceCode
  };
  const result = await api.post(apiUrl, payload, false, options);
  return result;
};
var getDeviceToken = async (config, options) => {
  if (isBrowser()) throw new Error("getDeviceToken is not supported in browser");
  if (!config.poll) return _getDeviceToken(config, options);
  let interval = POLL_INTERVAL;
  while (true) try {
    const deviceToken = await _getDeviceToken(config, options);
    return deviceToken;
  } catch (error) {
    if (error instanceof APIError) {
      var _error_rawError, _error_rawError1;
      if ((null == error ? void 0 : null === (_error_rawError = error.rawError) || void 0 === _error_rawError ? void 0 : _error_rawError.error) === "authorization_pending") {
        await sleep(interval);
        continue;
      }
      if ((null == error ? void 0 : null === (_error_rawError1 = error.rawError) || void 0 === _error_rawError1 ? void 0 : _error_rawError1.error) === "slow_down") {
        if (interval < MAX_POLL_INTERVAL) interval += POLL_INTERVAL;
        await sleep(interval);
        continue;
      }
    }
    throw error;
  }
};
var _getJWTToken = async (config, options) => {
  const api = new APIClient({
    token: config.token,
    baseURL: config.baseURL
  });
  let apiUrl;
  apiUrl = config.accountId ? `/api/permission/oauth2/account/${config.accountId}/token` : "/api/permission/oauth2/token";
  var _config_durationSeconds;
  const payload = {
    grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
    duration_seconds: null !== (_config_durationSeconds = config.durationSeconds) && void 0 !== _config_durationSeconds ? _config_durationSeconds : 900,
    scope: config.scope
  };
  const result = await api.post(apiUrl, payload, false, options);
  return result;
};
var getJWTToken = async (config, options) => {
  if (isBrowser()) throw new Error("getJWTToken is not supported in browser");
  const keyFormat = config.privateKey.includes("BEGIN RSA PRIVATE KEY") ? "RSA" : config.privateKey.includes("BEGIN PRIVATE KEY") ? "PKCS8" : null;
  if (!keyFormat) throw APIError.generate(400, void 0, "Invalid private key format. Expected PEM format (RSA or PKCS8)", void 0);
  const now = Math.floor(Date.now() / 1e3);
  const payload = {
    iss: config.appId,
    aud: config.aud,
    iat: now,
    exp: now + 3600,
    jti: generateRandomString()
  };
  if (config.sessionName) payload.session_name = config.sessionName;
  return new Promise((resolve, reject) => {
    var _config_algorithm;
    __WEBPACK_EXTERNAL_MODULE_jsonwebtoken__["default"].sign(payload, config.privateKey, {
      algorithm: null !== (_config_algorithm = config.algorithm) && void 0 !== _config_algorithm ? _config_algorithm : "RS256",
      keyid: config.keyid
    }, async (err, token) => {
      if (err || !token) {
        reject(err);
        return;
      }
      try {
        const result = await _getJWTToken({
          ...config,
          token
        }, options);
        resolve(result);
      } catch (err2) {
        reject(err2);
      }
    });
  });
};
var auth_PKCEAuthErrorType = function(PKCEAuthErrorType) {
  PKCEAuthErrorType["AUTHORIZATION_PENDING"] = "authorization_pending";
  PKCEAuthErrorType["SLOW_DOWN"] = "slow_down";
  PKCEAuthErrorType["ACCESS_DENIED"] = "access_denied";
  PKCEAuthErrorType["EXPIRED_TOKEN"] = "expired_token";
  return PKCEAuthErrorType;
}({});
var CozeAPI = class extends APIClient {
  constructor(...args) {
    super(...args), this.bots = new Bots(this), this.chat = new Chat(this), this.conversations = new Conversations(this), this.files = new Files(this), /**
    * @deprecated
    */
    this.knowledge = new Knowledge(this), this.datasets = new Datasets(this), this.workflows = new Workflows(this), this.workspaces = new WorkSpaces(this), this.audio = new Audio(this), this.templates = new Templates(this), this.websockets = new Websockets(this), this.variables = new Variables(this), this.users = new Users(this);
  }
};
export {
  APIConnectionError,
  APIError,
  APIUserAbortError,
  Audio,
  AuthenticationError,
  BadRequestError,
  Bots,
  COZE_CN_BASE_URL,
  COZE_CN_BASE_WS_URL,
  COZE_COM_BASE_URL,
  COZE_COM_BASE_WS_URL,
  Chat,
  chat_ChatEventType as ChatEventType,
  chat_ChatStatus as ChatStatus,
  Conversations,
  CozeAPI,
  CozeError,
  rooms_CreateRoomTurnDetectionType as CreateRoomTurnDetectionType,
  Datasets,
  documents_Documents as Documents,
  Files,
  GatewayError,
  Images,
  InternalServerError,
  JSONParseError,
  Knowledge,
  Live,
  live_LiveType as LiveType,
  MAX_POLL_INTERVAL,
  messages_Messages as Messages,
  NotFoundError,
  Documents as OldDocuments,
  auth_PKCEAuthErrorType as PKCEAuthErrorType,
  POLL_INTERVAL,
  PermissionDeniedError,
  RateLimitError,
  chat_RoleType as RoleType,
  rooms_RoomMode as RoomMode,
  Rooms,
  Runs,
  bots_SuggestReplyMode as SuggestReplyMode,
  templates_TemplateEntityType as TemplateEntityType,
  Templates,
  TimeoutError,
  Transcriptions,
  Users,
  bots_VariableChannel as VariableChannel,
  bots_VariableType as VariableType,
  Variables,
  VoiceprintFeature,
  VoiceprintGroups,
  Voices,
  WebSocketAPI,
  Websockets,
  types_WebsocketsEventType as WebsocketsEventType,
  WorkSpaces,
  WorkflowChat,
  WorkflowEvent,
  runs_WorkflowEventType as WorkflowEventType,
  Workflows,
  _getJWTToken,
  adapterFetch,
  castToError,
  fetchAPI,
  getDeviceCode,
  getDeviceToken,
  getJWTToken,
  getPKCEAuthenticationUrl,
  getPKCEOAuthToken,
  getWebAuthenticationUrl,
  getWebOAuthToken,
  handleAdditionalMessages,
  handleParameters,
  refreshOAuthToken
};
/*! Bundled license information:

reconnecting-websocket/dist/reconnecting-websocket-mjs.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0
  
  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.
  
  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** *)
  (*!
   * Reconnecting WebSocket
   * by Pedro Ladaria <pedro.ladaria@gmail.com>
   * https://github.com/pladaria/reconnecting-websocket
   * License MIT
   *)
*/
//# sourceMappingURL=@coze_api.js.map
